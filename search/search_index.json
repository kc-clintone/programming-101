{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\uddd1\u200d\ud83d\udcbb Programming 101: Bash &amp; Linux Scripting for Beginners","text":"<p>Welcome to Programming 101 \u2013 your open-source gateway to learning Bash scripting, mastering the Linux command line, and understanding how computers interact under the hood.</p> <p>Whether you're an absolute beginner or just curious about the command line, you're in the right place!</p>"},{"location":"#what-youll-learn","title":"\ud83d\ude80 What You\u2019ll Learn","text":"<ul> <li>\ud83d\udc27 Introduction to Linux OS and terminal basics  </li> <li>\ud83e\udded Navigating the file system with Bash commands  </li> <li>\u270d\ufe0f Writing, running, and debugging Bash scripts  </li> <li>\ud83d\udd01 Using variables, conditionals, and loops  </li> <li>\ud83d\udcc2 Managing files, directories, and permissions  </li> <li>\u2699\ufe0f Automating tasks with functions and modular scripts  </li> <li>\ud83d\udee0\ufe0f Script debugging and environment management  </li> </ul>"},{"location":"#course-map-repository-structure","title":"\ud83e\udded Course Map (Repository Structure)","text":"<pre><code>programming-101/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 syllabus.md\n\u251c\u2500\u2500 setup.md\n\u251c\u2500\u2500 lessons/\n\u251c\u2500\u2500 exercises/\n\u251c\u2500\u2500 quizzes/\n\u251c\u2500\u2500 scripts/\n\u251c\u2500\u2500 assets/\n\u251c\u2500\u2500 resources.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u2514\u2500\u2500 LICENSE\n</code></pre> <p>\ud83e\udde0 Everything you need to go from beginner to confident Linux scripter!</p>"},{"location":"#getting-started","title":"\ud83d\udcdd Getting Started","text":"<ol> <li>Clone the repository</li> </ol> <pre><code>git clone https://github.com/kc-clintone/programming-101.git\ncd programming-101\n</code></pre> <ol> <li> <p>Set up your environment    Follow setup.md to configure your terminal and tools.</p> </li> <li> <p>Explore the syllabus    Open syllabus.md to see the full course outline.</p> </li> <li> <p>Start learning    Begin with the first lesson in <code>lessons/01-intro_to_linux/</code> and follow along with exercises and quizzes.</p> </li> </ol>"},{"location":"#who-is-this-for","title":"\ud83d\udca1 Who Is This For?","text":"<p>\ud83c\udf93 You, if you\u2019re:</p> <ul> <li>A complete programming beginner</li> <li>Curious about Linux or terminal-based systems</li> <li>Looking to learn scripting for automation or DevOps</li> <li>Teaching others or coaching a beginner group</li> </ul> <p>\ud83e\uddef No prior coding experience required!</p>"},{"location":"#how-to-contribute","title":"\ud83e\udd1d How to Contribute","text":"<p>We \ud83d\udc96 contributions!</p> <ul> <li>Read CONTRIBUTING.md for how to report issues or suggest lessons.</li> <li>Follow our CODE_OF_CONDUCT.md to keep this space welcoming.</li> </ul>"},{"location":"#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>LinuxCommand.org</li> <li>Bash Manual (GNU)</li> <li>Bash Scripting Tutorial (Ryan\u2019s Tutorials)</li> <li>The Art of Command Line</li> </ul> <p>More links in resources.md \u2192</p>"},{"location":"#contact-feedback","title":"\ud83d\udcec Contact &amp; Feedback","text":"<p>Questions? Suggestions? Open an issue or join the repo\u2019s Discussions tab.</p> <p>\ud83d\udcc4 Download the Full Course as PDF</p> <p>\"The best way to learn is by doing.\" \u2013 Richard Feynman</p>"},{"location":"#happy-hacking","title":"Happy hacking! \ud83e\uddd1\u200d\ud83d\udcbb\ud83d\udca5","text":""},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We are committed to making this project a welcoming and inclusive space for everyone, regardless of experience level, background, or identity. We pledge to act and interact in ways that contribute to an open, friendly, and respectful environment.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contribute to a positive environment include: - Using welcoming and inclusive language - Being respectful of differing viewpoints and experiences - Providing constructive feedback - Showing empathy and kindness toward other community members</p> <p>Examples of unacceptable behavior include: - Harassment, discrimination, or exclusion of any kind - Personal attacks or insults - Unwelcome sexual attention or advances - Trolling, derogatory comments, or other disruptive behavior</p>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces and in public spaces when an individual is representing the project or its community.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting the maintainers.</p> <p>By participating, you agree to abide by this Code of Conduct and help us keep this community friendly and productive for all.</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to this open source course! Your feedback, suggestions, and improvements help make this project better for everyone.</p>"},{"location":"CONTRIBUTING/#how-you-can-contribute","title":"How You Can Contribute","text":""},{"location":"CONTRIBUTING/#1-suggest-new-content-or-improvements","title":"1. Suggest New Content or Improvements","text":"<ul> <li>New Lessons or Examples:   If you\u2019d like to add a new lesson, example script, or expand existing content, please open a pull request (PR) with your proposed changes.  </li> <li>Make sure your content is clear, beginner-friendly, and well-commented.</li> <li> <p>Include a brief description of your addition in the PR description.</p> </li> <li> <p>Improvements or Corrections:   See a typo, unclear explanation, or outdated information?  </p> </li> <li>Fork the repository and make your improvements.</li> <li>Open a PR describing your changes.</li> </ul>"},{"location":"CONTRIBUTING/#2-report-bugs-or-errors","title":"2. Report Bugs or Errors","text":"<ul> <li>Found a bug or issue? </li> <li>Go to the \"Issues\" tab and click \"New Issue.\"</li> <li>Clearly describe the problem and steps to reproduce it.</li> <li>Include screenshots or code snippets, if possible.</li> <li>If you find errors in code examples, mention the file and line number.</li> </ul>"},{"location":"CONTRIBUTING/#3-request-a-new-feature-or-topic","title":"3. Request a New Feature or Topic","text":"<ul> <li>Open an issue and label it as a \"feature request.\"</li> <li>Describe the feature or topic you\u2019d like to see added, and explain its benefit to learners.</li> </ul>"},{"location":"CONTRIBUTING/#contributing-steps","title":"Contributing Steps","text":"<ol> <li>Fork this repository.</li> <li>Create a new branch for your changes:    <pre><code>git checkout -b my-feature\n</code></pre></li> <li>Make your changes and commit them with a clear message.</li> <li>Push to your fork and open a pull request.</li> <li>Wait for review\u2014we\u2019ll provide feedback or merge your contribution!</li> </ol>"},{"location":"CONTRIBUTING/#code-and-content-style","title":"Code and Content Style","text":"<ul> <li>Write for beginners: use clear language and explain concepts simply.</li> <li>Comment scripts and code examples.</li> <li>Use consistent formatting.</li> </ul>"},{"location":"CONTRIBUTING/#community-standards","title":"Community Standards","text":"<ul> <li>Be respectful and constructive.</li> <li>Follow our Code of Conduct.</li> </ul> <p>Thank you for helping make this course better! If you have questions, feel free to open an issue or reach out via GitHub Discussions.</p>"},{"location":"resources/","title":"Additional Resources","text":"<p>Enhance your learning with these curated resources covering Linux, Bash scripting, and foundational programming concepts. Explore tutorials, documentation, interactive platforms, and reference guides to deepen your understanding.</p>"},{"location":"resources/#linux-basics","title":"Linux Basics","text":"<ul> <li>The Linux Command Line by William Shotts (Free Book)</li> <li>Linux Journey (Interactive Learning)</li> <li>Introduction to Linux (edX, Free Course)</li> <li>Linux Handbook</li> <li>Linux Survival (Interactive Bash Tutorial)</li> </ul>"},{"location":"resources/#bash-scripting","title":"Bash Scripting","text":"<ul> <li>Bash Guide for Beginners (The Linux Documentation Project)</li> <li>Advanced Bash-Scripting Guide (The Linux Documentation Project)</li> <li>ShellCheck (Online Bash Linter)</li> <li>ExplainShell (Command Explanation Tool)</li> <li>Bash Scripting Tutorial (TutorialsPoint)</li> </ul>"},{"location":"resources/#general-programming","title":"General Programming","text":"<ul> <li>freeCodeCamp (Interactive Programming Lessons)</li> <li>Codecademy: Learn Bash Scripting</li> <li>The Odin Project: Foundations</li> <li>W3Schools: Bash Scripting</li> </ul>"},{"location":"resources/#reference-documentation","title":"Reference &amp; Documentation","text":"<ul> <li>GNU Bash Reference Manual</li> <li>Linux man pages online</li> <li>SS64 Bash Reference</li> <li>DevDocs: Bash Documentation</li> </ul>"},{"location":"resources/#community-forums","title":"Community &amp; Forums","text":"<ul> <li>Stack Overflow: Bash</li> <li>Unix &amp; Linux Stack Exchange</li> <li>Reddit: r/linux4noobs</li> <li>Reddit: r/bash</li> </ul> <p>Feel free to explore these resources as you progress through the course. They will help reinforce your learning and provide support as you tackle new challenges.</p>"},{"location":"setup/","title":"Setup Guide","text":"<p>Welcome! This guide will help you get ready for the Bash Scripting course, no matter which operating system you use. Follow the instructions for your platform below.</p>"},{"location":"setup/#1-windows-users","title":"1. Windows Users","text":""},{"location":"setup/#option-a-windows-subsystem-for-linux-wsl","title":"Option A: Windows Subsystem for Linux (WSL)","text":"<p>Recommended for the full Linux experience.</p> <ol> <li>Enable WSL:</li> <li>Open PowerShell as Administrator and run:      <pre><code>wsl --install\n</code></pre></li> <li> <p>Restart your computer if prompted.</p> </li> <li> <p>Install a Linux distribution:</p> </li> <li>After restart, search for \"Microsoft Store\" and install Ubuntu (or your preferred distro).</li> <li> <p>Launch Ubuntu and follow the prompts to create a user.</p> </li> <li> <p>Update the package list: <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> </li> <li> <p>Test Bash: <pre><code>bash --version\n</code></pre>    You should see version info.</p> </li> </ol>"},{"location":"setup/#option-b-git-bash","title":"Option B: Git Bash","text":"<p>Quick and easy for basic Bash scripting (not all Linux commands supported).</p> <ol> <li>Download Git for Windows and install it.</li> <li>After installation, right-click anywhere and select Git Bash Here to open a Bash terminal.</li> </ol>"},{"location":"setup/#2-macos-users","title":"2. macOS Users","text":"<ol> <li>Open Terminal: </li> <li>Find it in Applications &gt; Utilities &gt; Terminal.</li> <li>Check Bash version: <pre><code>bash --version\n</code></pre>    (macOS comes with Bash pre-installed; version 3.x is common. For newer Bash, consider installing via Homebrew: <code>brew install bash</code>)</li> <li>You're ready!</li> </ol>"},{"location":"setup/#3-linux-users","title":"3. Linux Users","text":"<ol> <li>Open your terminal.</li> <li>Check Bash version: <pre><code>bash --version\n</code></pre>    (Most Linux distributions come with Bash pre-installed.)</li> <li>Update your system (optional): <pre><code>sudo apt update &amp;&amp; sudo apt upgrade    # For Ubuntu/Debian\nsudo dnf update                        # For Fedora\nsudo pacman -Syu                       # For Arch\n</code></pre></li> </ol>"},{"location":"setup/#4-clone-the-course-repository","title":"4. Clone the Course Repository","text":"<p>After setting up your terminal and Bash, download the course materials:</p> <pre><code>git clone https://github.com/kc-clintone/programming-101.git\ncd programming-101\n</code></pre>"},{"location":"setup/#5-recommended-code-editors","title":"5. Recommended Code Editors","text":"<ul> <li>Visual Studio Code</li> <li>Sublime Text</li> <li>nano or vim for terminal editing</li> </ul>"},{"location":"setup/#6-next-steps","title":"6. Next Steps","text":"<ul> <li>Open the syllabus.md to begin your learning journey!</li> <li>Start with the first module and follow along with the lessons.</li> </ul> <p>Questions or issues? Open an issue in the repository or ask for help in Discussions!</p> <p>Happy scripting!</p>"},{"location":"syllabus/","title":"\ud83d\udc27 Bash Scripting Course Syllabus","text":"<p>Welcome to the Bash Scripting Bootcamp! This course takes you from zero to writing powerful shell scripts that automate everyday tasks on Linux. Whether you're just getting started with programming or want to understand how to work with the terminal like a pro, this course is for you.</p>"},{"location":"syllabus/#prerequisites","title":"\ud83d\udccc Prerequisites","text":"<ul> <li>Basic computer skills (creating files, copy-pasting, navigating folders)</li> <li>A Linux machine or access to a Linux terminal (can be WSL on Windows or a VM)</li> <li>No prior programming experience required</li> </ul>"},{"location":"syllabus/#tools-youll-use","title":"\ud83e\uddf0 Tools You'll Use","text":"<ul> <li>Bash (GNU Bourne Again Shell)</li> <li>Terminal Emulator (e.g., GNOME Terminal, iTerm2, Windows Terminal)</li> <li>Text Editor (VS Code recommended)</li> </ul>"},{"location":"syllabus/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ol> <li>Module 1: Introduction to Linux and the Command Line</li> <li>Module 2: Bash Scripting Basics</li> <li>Module 3: Working with Variables and User Input</li> <li>Module 4: Conditional Statements</li> <li>Module 5: Loops and Iteration</li> <li>Module 6: Working with Files, Directories, and Globbing</li> <li>Module 7: Functions and Script Organization</li> <li>Module 8: Advanced Topics and Final Project</li> </ol>"},{"location":"syllabus/#module-1-introduction-to-linux-and-the-command-line","title":"Module 1: Introduction to Linux and the Command Line","text":"<p>\u23f1 Estimated Time: 1.5\u20132 hours</p>"},{"location":"syllabus/#learning-outcomes","title":"Learning Outcomes","text":"<ul> <li>Understand what Linux is and why it\u2019s used.</li> <li>Navigate the file system using shell commands.</li> <li>Recognize different types of shells.</li> </ul>"},{"location":"syllabus/#lessons","title":"Lessons","text":"<ol> <li>What is Linux? History and Overview  </li> <li>The Terminal and Shells: Bash and Others  </li> <li>Navigating the File System (<code>ls</code>, <code>cd</code>, <code>pwd</code>)  </li> <li>Viewing and Manipulating Files (<code>cat</code>, <code>less</code>, <code>cp</code>, <code>mv</code>, <code>rm</code>)  </li> </ol> <p>\ud83d\udce6 Mini Project Suggestion: Write a script that creates a folder structure for a new project (e.g. <code>/project/src</code>, <code>/project/docs</code>, etc.)</p>"},{"location":"syllabus/#module-2-bash-scripting-basics","title":"Module 2: Bash Scripting Basics","text":"<p>\u23f1 Estimated Time: 1 hour</p>"},{"location":"syllabus/#learning-outcomes_1","title":"Learning Outcomes","text":"<ul> <li>Understand what a Bash script is and how to create one.</li> <li>Execute simple Bash scripts.</li> <li>Make scripts executable.</li> </ul>"},{"location":"syllabus/#lessons_1","title":"Lessons","text":"<ol> <li>What is a Bash Script?  </li> <li>Creating and Running Your First Script  </li> <li>Script Permissions and the Shebang (<code>#!</code>)  </li> <li>Using Comments and Basic Output (<code>echo</code>)  </li> </ol> <p>\ud83d\udcdd Practice Quiz: Identify valid shebang lines and correct permission commands.</p>"},{"location":"syllabus/#module-3-working-with-variables-and-user-input","title":"Module 3: Working with Variables and User Input","text":"<p>\u23f1 Estimated Time: 1.5 hours</p>"},{"location":"syllabus/#learning-outcomes_2","title":"Learning Outcomes","text":"<ul> <li>Use variables to store and manipulate data.</li> <li>Read user input in scripts.</li> <li>Understand quoting and escaping.</li> </ul>"},{"location":"syllabus/#lessons_2","title":"Lessons","text":"<ol> <li>Defining and Using Variables  </li> <li>Reading User Input (<code>read</code>)  </li> <li>Quoting and Escaping Characters  </li> <li>Arithmetic Operations in Bash  </li> </ol> <p>\ud83d\udce6 Mini Project Suggestion: Create a greeting script that personalizes messages based on user input.</p>"},{"location":"syllabus/#module-4-conditional-statements","title":"Module 4: Conditional Statements","text":"<p>\u23f1 Estimated Time: 2 hours</p>"},{"location":"syllabus/#learning-outcomes_3","title":"Learning Outcomes","text":"<ul> <li>Write scripts that make decisions.</li> <li>Use <code>if</code>, <code>else</code>, and <code>elif</code> constructs.</li> <li>Perform string and numeric comparisons.</li> </ul>"},{"location":"syllabus/#lessons_3","title":"Lessons","text":"<ol> <li>Introduction to Conditionals (<code>if</code>, <code>then</code>, <code>else</code>)  </li> <li>Numeric and String Comparisons (<code>[ ]</code>, <code>[[ ]]</code>)  </li> <li>Nested Conditionals  </li> <li>Case Statements (<code>case</code>)  </li> </ol> <p>\ud83d\udcdd Practice Quiz: Write a script that checks if a number is positive, negative, or zero.</p>"},{"location":"syllabus/#module-5-loops-and-iteration","title":"Module 5: Loops and Iteration","text":"<p>\u23f1 Estimated Time: 1.5\u20132 hours</p>"},{"location":"syllabus/#learning-outcomes_4","title":"Learning Outcomes","text":"<ul> <li>Automate repetitive tasks with loops.</li> <li>Use <code>for</code>, <code>while</code>, and <code>until</code> loops.</li> <li>Understand the use of <code>break</code> and <code>continue</code>.</li> </ul>"},{"location":"syllabus/#lessons_4","title":"Lessons","text":"<ol> <li>For Loops  </li> <li>While Loops  </li> <li>Until Loops  </li> <li>Breaking and Continuing Loops  </li> </ol> <p>\ud83d\udce6 Mini Project Suggestion: Make a script that loops through a list of files and prints their size.</p>"},{"location":"syllabus/#module-6-working-with-files-directories-and-globbing","title":"Module 6: Working with Files, Directories, and Globbing","text":"<p>\u23f1 Estimated Time: 2 hours</p>"},{"location":"syllabus/#learning-outcomes_5","title":"Learning Outcomes","text":"<ul> <li>Read from and write to files.</li> <li>Use wildcards (globbing) to match file patterns.</li> <li>Manipulate file and directory structures within scripts.</li> </ul>"},{"location":"syllabus/#lessons_5","title":"Lessons","text":"<ol> <li>Redirecting Input and Output (<code>&gt;</code>, <code>&gt;&gt;</code>, <code>&lt;</code>)  </li> <li>Reading Files Line by Line  </li> <li>Globbing and Wildcards (<code>*</code>, <code>?</code>, <code>[]</code>)  </li> <li>Script Automation with Files and Directories  </li> </ol> <p>\ud83d\udce6 Mini Project Suggestion: Create a script that organizes files into folders based on file extensions.</p>"},{"location":"syllabus/#module-7-functions-and-script-organization","title":"Module 7: Functions and Script Organization","text":"<p>\u23f1 Estimated Time: 1.5 hours</p>"},{"location":"syllabus/#learning-outcomes_6","title":"Learning Outcomes","text":"<ul> <li>Write reusable functions in Bash.</li> <li>Organize scripts with functions for clarity.</li> <li>Understand variable scope in Bash.</li> </ul>"},{"location":"syllabus/#lessons_6","title":"Lessons","text":"<ol> <li>Defining and Calling Functions  </li> <li>Passing Arguments to Functions  </li> <li>Script Organization and Modularization  </li> <li>Variable Scope and Best Practices  </li> </ol> <p>\ud83d\udce6 Mini Project Suggestion: Refactor a previous project using functions for better organization.</p>"},{"location":"syllabus/#module-8-advanced-topics-and-final-project","title":"Module 8: Advanced Topics and Final Project","text":"<p>\u23f1 Estimated Time: 2+ hours</p>"},{"location":"syllabus/#learning-outcomes_7","title":"Learning Outcomes","text":"<ul> <li>Use environment variables and exit statuses.</li> <li>Debug Bash scripts.</li> <li>Apply all course concepts in a practical project.</li> </ul>"},{"location":"syllabus/#lessons_7","title":"Lessons","text":"<ol> <li>Environment Variables and Exporting  </li> <li>Exit Status and Error Handling  </li> <li>Debugging Bash Scripts (<code>set</code>, <code>trap</code>)  </li> <li>Final Project: Build a Useful Bash Script  </li> </ol> <p>\ud83d\udce6 Final Project Suggestions: - A system backup utility - A user setup automation script - A terminal-based to-do manager</p>"},{"location":"syllabus/#next-steps","title":"\ud83c\udfc1 Next Steps","text":"<p>Now that you\u2019ve learned the fundamentals of Bash scripting:</p> <ul> <li>Try building your own scripts for repetitive daily tasks.</li> <li>Share your projects on GitHub and collaborate with others.</li> <li>Explore further tools like <code>grep</code>, <code>awk</code>, <code>sed</code>, <code>cron</code>, or even DevOps pipelines.</li> </ul> <p>\ud83c\udf89 Good luck, and happy scripting!</p>"},{"location":"assets/","title":"Assets","text":"<p>Welcome to the assets section of the Programming 101 course!</p> <p>This directory contains supporting materials such as images, diagrams, and PDFs used throughout the course. These resources are referenced in lessons, exercises, and quizzes to enhance your learning experience.</p>"},{"location":"assets/#structure","title":"Structure","text":"<ul> <li><code>images/</code>: Contains images used in course materials.</li> <li><code>diagrams/</code>: Contains diagrams illustrating key concepts.</li> <li><code>pdfs/</code>: Contains PDF documents for additional reference.</li> </ul>"},{"location":"assets/#how-to-use","title":"How to Use","text":"<ul> <li>Refer to these assets as directed in the lessons, exercises, or quizzes.</li> <li>You may view or download these files to assist with your studies.</li> </ul>"},{"location":"assets/#tips","title":"Tips","text":"<ul> <li>Visual aids can help reinforce your understanding of complex topics.</li> <li>Explore the assets to supplement your learning as needed.</li> </ul>"},{"location":"exercises/","title":"Exercises","text":"<p>Welcome to the exercises section of the Programming 101 course!</p> <p>This directory contains hands-on tasks and practice problems designed to reinforce the concepts covered in each lesson. The exercises are organized to match the lesson topics, helping you apply your knowledge and build practical skills.</p>"},{"location":"exercises/#how-to-use","title":"How to Use","text":"<ul> <li>Work through the exercises after completing each lesson in the <code>lessons/</code> directory.</li> <li>Each exercise is intended to be completed using the skills and concepts introduced in the corresponding lesson.</li> <li>You may find references to files, scripts, or commands that you should try out on your own system.</li> </ul>"},{"location":"exercises/#structure","title":"Structure","text":"<ul> <li>Exercises are grouped by topic, following the lesson order.</li> <li>Some exercises may require you to write Bash scripts, manipulate files, or answer conceptual questions.</li> </ul>"},{"location":"exercises/#tips","title":"Tips","text":"<ul> <li>Take your time and experiment with different solutions.</li> <li>If you get stuck, review the related lesson or seek help from the course community.</li> <li>Practice is key to mastering programming and Linux basics!</li> </ul> <p>Happy learning!</p>"},{"location":"exercises/01-intro_to_linux/file_system_interaction_exercises/","title":"Exercises: File System Interaction","text":"<ol> <li>Use the terminal to create a new directory called <code>practice_dir</code> in your home directory.</li> <li>Create a new file named <code>test.txt</code> inside <code>practice_dir</code>.</li> <li>Move <code>test.txt</code> to your Desktop (or another directory of your choice).</li> <li>Delete the <code>practice_dir</code> directory and its contents.</li> </ol>"},{"location":"exercises/01-intro_to_linux/linux_file_system_exercises/","title":"Exercises: Linux File System","text":"<ol> <li>Draw or describe the basic structure of the Linux file system hierarchy (root, home, bin, etc.).</li> <li>What is the purpose of the <code>/home</code> directory? What about <code>/bin</code> and <code>/etc</code>?</li> <li>Use the terminal to list all files and directories in your home directory. What command did you use?</li> </ol>"},{"location":"exercises/01-intro_to_linux/terminals_and_shells_exercises/","title":"Exercises: Terminals and Shells","text":"<ol> <li>What is a terminal emulator? How is it different from a shell?</li> <li>Open a terminal and find out which shell you are currently using. What command did you use?</li> <li>List two popular Linux shells besides Bash.</li> </ol>"},{"location":"exercises/01-intro_to_linux/what_is_linux_exercises/","title":"Exercises: What is Linux?","text":"<ol> <li>In your own words, describe what Linux is and name two popular Linux distributions.</li> <li>Research and list three reasons why someone might choose Linux over another operating system.</li> <li>Find out what the Linux mascot is called and explain its significance.</li> </ol>"},{"location":"exercises/02-bash_basics/comments_and_output_exercises/","title":"Exercises: Comments and Output","text":"<ol> <li>Add a comment to the top of your Bash script describing what it does.</li> <li>Write a script that prints three different lines of output to the terminal.</li> <li>What symbol is used for comments in Bash?</li> </ol>"},{"location":"exercises/02-bash_basics/permissions_and_shebang_exercises/","title":"Exercises: Permissions and Shebang","text":"<ol> <li>What does the shebang (<code>#!</code>) at the top of a script do?</li> <li>Change the permissions of your script to make it executable. What command did you use?</li> <li>Why is it important to set the correct permissions on scripts?</li> </ol>"},{"location":"exercises/02-bash_basics/what_is_bash_scripting_exercises/","title":"Exercises: What is Bash Scripting?","text":"<ol> <li>In your own words, explain what a Bash script is and give an example use case.</li> <li>Write a simple Bash script that prints \"Hello, World!\" to the terminal.</li> <li>What command do you use to make a script executable?</li> </ol>"},{"location":"exercises/02-bash_basics/your_first_script_exercises/","title":"Exercises: Your First Script","text":"<ol> <li>Write a Bash script that prints your name and the current date.</li> <li>Modify your script to print the name of the current working directory.</li> <li>Run your script from the terminal. What command did you use?</li> </ol>"},{"location":"exercises/03-control_flow/charachter_manupilation_exercises/","title":"Exercises: Character Manipulation","text":"<ol> <li>Write a Bash script that takes a string as input and prints it in uppercase.</li> <li>Modify your script to print the length of the input string.</li> <li>How can you extract a substring from a variable in Bash?</li> </ol>"},{"location":"exercises/03-control_flow/operations_exercises/","title":"Exercises: Operations","text":"<ol> <li>Write a Bash script that adds two numbers and prints the result.</li> <li>Modify your script to multiply two numbers and print the result.</li> <li>What command or syntax is used for arithmetic operations in Bash?</li> </ol>"},{"location":"exercises/03-control_flow/user_input_exercises/","title":"Exercises: User Input","text":"<ol> <li>Write a Bash script that prompts the user for their age and prints a message with their response.</li> <li>Modify your script to check if the age is greater than 18 and print a different message for adults and minors.</li> <li>What command is used to read user input in Bash?</li> </ol>"},{"location":"exercises/03-control_flow/variables_exercises/","title":"Exercises: Variables","text":"<ol> <li>Create a Bash script that defines a variable called <code>NAME</code> and assigns your name to it. Print the value of <code>NAME</code>.</li> <li>Modify your script to ask the user for their favorite color and store it in a variable. Print a message using that color.</li> <li>What is the difference between a variable and a command-line argument?</li> </ol>"},{"location":"exercises/04-conditionalss/basic_comparisons_exercises/","title":"Exercises: Basic Comparisons","text":"<ol> <li>Write a Bash script that compares two numbers and prints which one is greater.</li> <li>Modify your script to check if the numbers are equal and print a message if they are.</li> <li>What operators are used for numeric comparison in Bash?</li> </ol>"},{"location":"exercises/04-conditionalss/case_statements_exercises/","title":"Exercises: Case Statements","text":"<ol> <li>Write a Bash script that asks the user for a day of the week and prints a message based on the input using a <code>case</code> statement.</li> <li>Add an option for invalid input that prints an error message.</li> <li>When would you use a <code>case</code> statement instead of multiple <code>if</code> statements?</li> </ol>"},{"location":"exercises/04-conditionalss/nested_conditionals_exercises/","title":"Exercises: Nested Conditionals","text":"<ol> <li>Write a Bash script that checks if a number is positive, negative, or zero using nested <code>if</code> statements.</li> <li>Modify your script to print a special message if the number is exactly 100.</li> <li>What are the potential drawbacks of deeply nested conditionals?</li> </ol>"},{"location":"exercises/04-conditionalss/what_are_conditionals_exercises/","title":"Exercises: What Are Conditionals?","text":"<ol> <li>In your own words, explain what a conditional statement is and why it is useful in programming.</li> <li>Write a simple Bash script that checks if a number is positive or negative.</li> <li>What is the syntax for an <code>if</code> statement in Bash?</li> </ol>"},{"location":"exercises/05-loops_and_iteration/breaking_and_continuing_exercises/","title":"Exercises: Breaking and Continuing","text":"<ol> <li>Write a Bash script that loops from 1 to 10 and prints each number, but skips 5 using <code>continue</code>.</li> <li>Modify your script to stop the loop entirely when it reaches 8 using <code>break</code>.</li> <li>What is the purpose of <code>break</code> and <code>continue</code> in loops?</li> </ol>"},{"location":"exercises/05-loops_and_iteration/for_loops_exercises/","title":"Exercises: For Loops","text":"<ol> <li>Write a Bash script that prints the numbers 1 to 10 using a <code>for</code> loop.</li> <li>Modify your script to print only even numbers between 1 and 20.</li> <li>How can you loop over all files in a directory using a <code>for</code> loop?</li> </ol>"},{"location":"exercises/05-loops_and_iteration/until_loops_exercises/","title":"Exercises: Until Loops","text":"<ol> <li>Write a Bash script that prints numbers from 10 down to 1 using an <code>until</code> loop.</li> <li>Modify your script to stop the loop if the number is 5.</li> <li>When would you use an <code>until</code> loop instead of a <code>while</code> loop?</li> </ol>"},{"location":"exercises/05-loops_and_iteration/while_loops_exercises/","title":"Exercises: While Loops","text":"<ol> <li>Write a Bash script that prints numbers from 1 to 5 using a <code>while</code> loop.</li> <li>Modify your script to keep asking the user for input until they type \"exit\".</li> <li>What is the difference between a <code>while</code> loop and a <code>for</code> loop in Bash?</li> </ol>"},{"location":"exercises/06-file_and_directories/IO_redirection_exercises/","title":"Exercises: IO Redirection","text":"<ol> <li>Write a Bash command to save the output of <code>ls</code> to a file called <code>listing.txt</code>.</li> <li>How do you append output to a file instead of overwriting it?</li> <li>Write a script that reads from a file and prints each line to the terminal.</li> </ol>"},{"location":"exercises/06-file_and_directories/globbing_in_bash_exercises/","title":"Exercises: Globbing in Bash","text":"<ol> <li>List all files in your home directory that end with <code>.txt</code> using a glob pattern.</li> <li>Write a Bash script that prints the names of all <code>.sh</code> files in the current directory.</li> <li>What does the <code>*</code> (asterisk) symbol mean in Bash globbing?</li> </ol>"},{"location":"exercises/06-file_and_directories/reading_files_in_bash_exercises/","title":"Exercises: Reading Files in Bash","text":"<ol> <li>Write a Bash script that reads a file line by line and prints each line with a line number.</li> <li>Modify your script to count the number of lines in the file.</li> <li>What command is commonly used to read files in Bash scripts?</li> </ol>"},{"location":"exercises/06-file_and_directories/script_automation_and_file_management_exercises/","title":"Exercises: Script Automation and File Management","text":"<ol> <li>Write a Bash script that creates a backup of a directory by copying it to a new location with a timestamp.</li> <li>Modify your script to delete files older than 7 days in a specified directory.</li> <li>Why is automation important in file management?</li> </ol>"},{"location":"exercises/07-functions/defining_and_calling_functions_exercises/","title":"Exercises: Defining and Calling Functions","text":"<ol> <li>Write a Bash function that prints \"Hello from a function!\" and call it from your script.</li> <li>Modify your function to accept a name as an argument and print a personalized greeting.</li> <li>What is the syntax for defining a function in Bash?</li> </ol>"},{"location":"exercises/07-functions/local_vs_global_variable_exercises/","title":"Exercises: Local vs Global Variables","text":"<ol> <li>Write a Bash script that demonstrates the difference between a local and a global variable inside a function.</li> <li>Why is it important to use local variables in functions?</li> <li>What command is used to declare a local variable in Bash?</li> </ol>"},{"location":"exercises/07-functions/modular_functions_exercises/","title":"Exercises: Modular Functions","text":"<ol> <li>Write two Bash functions: one that adds two numbers and another that multiplies two numbers. Call both from your script.</li> <li>How can modular functions make your scripts easier to maintain?</li> <li>What is the benefit of reusing functions in multiple scripts?</li> </ol>"},{"location":"exercises/07-functions/passing_arguments_and_returning_values_exercises/","title":"Exercises: Passing Arguments and Returning Values","text":"<ol> <li>Write a Bash function that takes two arguments and prints their sum.</li> <li>Modify your function to return the sum as the function's exit status.</li> <li>How do you access arguments passed to a function in Bash?</li> </ol>"},{"location":"exercises/08-advance/debugging_bash_scripts_exercises/","title":"Exercises: Debugging Bash Scripts","text":"<ol> <li>Add <code>set -x</code> to a Bash script and observe the output. What does this option do?</li> <li>Write a script with a bug (e.g., a typo in a variable name) and use debugging options to find the error.</li> <li>What other options can help with debugging Bash scripts?</li> </ol>"},{"location":"exercises/08-advance/environment_variables_exercises/","title":"Exercises: Environment Variables","text":"<ol> <li>Write a Bash script that prints the value of the <code>HOME</code> environment variable.</li> <li>Set a custom environment variable in your script and print its value.</li> <li>How do you export an environment variable so it is available to child processes?</li> </ol>"},{"location":"exercises/08-advance/exit_status_and_error_handling_exercises/","title":"Exercises: Exit Status and Error Handling","text":"<ol> <li>Write a Bash script that runs a command and prints its exit status.</li> <li>Modify your script to print a custom error message if the command fails.</li> <li>What is the purpose of the <code>$?</code> variable in Bash?</li> </ol>"},{"location":"exercises/08-advance/project_exercises/","title":"Project Exercise","text":"<ol> <li>Design a Bash script or a set of scripts that automate a real-world task (e.g., backup, file organization, system monitoring).</li> <li>Write a README file explaining what your project does and how to use it.</li> <li>What challenges did you face while working on this project, and how did you overcome them?</li> </ol>"},{"location":"lessons/","title":"Lessons","text":"<p>Welcome to the lessons section of the Programming 101 course!</p> <p>This directory contains the core instructional materials for the course. Each subfolder covers a specific topic, providing explanations, examples, and guidance to help you learn foundational programming and Linux concepts.</p>"},{"location":"lessons/#how-to-use","title":"How to Use","text":"<ul> <li>Start with the first lesson and progress sequentially.</li> <li>Read through each topic and try out the examples on your own system.</li> <li>Refer to the corresponding exercises in the <code>exercises/</code> directory to practice what you've learned.</li> </ul>"},{"location":"lessons/#structure","title":"Structure","text":"<ul> <li>Lessons are organized by topic and numbered for easy navigation.</li> <li>Each topic includes one or more markdown files with detailed explanations and examples.</li> </ul>"},{"location":"lessons/#tips","title":"Tips","text":"<ul> <li>Take notes as you go to reinforce your understanding.</li> <li>Experiment with the commands and scripts provided in each lesson.</li> <li>Don\u2019t hesitate to revisit previous lessons if you need a refresher.</li> </ul> <p>Happy learning!</p>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/","title":"\ud83d\udee0\ufe0f Viewing and Manipulating Files in Linux","text":"<p>Once you know how to move around the Linux file system, the next step is learning how to work with files: view, copy, move, and delete them safely using the command line.</p> <p>This lesson covers essential commands:</p> <ul> <li><code>cat</code> \u2013 view file contents</li> <li><code>less</code> \u2013 scroll through files</li> <li><code>cp</code> \u2013 copy files</li> <li><code>mv</code> \u2013 move or rename files</li> <li><code>rm</code> \u2013 delete files</li> </ul> <p>And we\u2019ll include safety tips so you don\u2019t lose important data by accident.</p>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#viewing-file-contents","title":"\ud83d\udc41\ufe0f Viewing File Contents","text":""},{"location":"lessons/01-intro_to_linux/file_system_interaction/#1-cat-view-the-whole-file","title":"1. <code>cat</code> \u2013 View the whole file","text":"<pre><code>cat filename.txt\n````\n\n* Displays the entire file in the terminal at once.\n* Great for short files.\n\n&gt; \u26a0\ufe0f For large files, `cat` will flood your screen. Use `less` instead.\n\n---\n\n### 2. `less` \u2013 Scroll through file contents\n\n```bash\nless filename.txt\n</code></pre> <ul> <li>Opens a scrollable viewer in the terminal.</li> <li> <p>Use:</p> </li> <li> <p><code>\u2191</code> and <code>\u2193</code> or <code>PageUp</code> / <code>PageDown</code> to navigate.</p> </li> <li><code>q</code> to quit.</li> </ul> <p>\ud83e\udde0 Analogy: Think of <code>cat</code> as unrolling an entire scroll at once, while <code>less</code> gives you a window to read page by page.</p>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#copying-moving-and-renaming-files","title":"\ud83d\udcc4 Copying, Moving, and Renaming Files","text":""},{"location":"lessons/01-intro_to_linux/file_system_interaction/#3-cp-copy-a-file","title":"3. <code>cp</code> \u2013 Copy a file","text":"<pre><code>cp original.txt copy.txt\n</code></pre> <ul> <li>Creates a duplicate of the file.</li> </ul>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#to-copy-into-a-folder","title":"To copy into a folder:","text":"<pre><code>cp notes.txt Documents/\n</code></pre>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#4-mv-move-or-rename-a-file","title":"4. <code>mv</code> \u2013 Move or rename a file","text":"<pre><code>mv oldname.txt newname.txt\n</code></pre> <ul> <li>Renames a file if destination is a filename.</li> <li>Moves a file if destination is a directory.</li> </ul>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#example-move-to-another-folder","title":"Example \u2013 Move to another folder:","text":"<pre><code>mv notes.txt Archive/\n</code></pre> <p>\ud83e\udde0 Tip: Unlike <code>cp</code>, <code>mv</code> removes the original file after moving.</p>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#deleting-files-carefully","title":"\ud83d\uddd1\ufe0f Deleting Files (Carefully)","text":""},{"location":"lessons/01-intro_to_linux/file_system_interaction/#5-rm-remove-a-file-or-directory","title":"5. <code>rm</code> \u2013 Remove a file or directory","text":"<pre><code>rm file.txt\n</code></pre> <p>\u26a0\ufe0f There\u2019s no Recycle Bin. Deleted means gone.</p>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#safety-tip-use-i-interactive","title":"\u26a0\ufe0f Safety Tip: Use <code>-i</code> (interactive)","text":"<pre><code>rm -i file.txt\n</code></pre> <ul> <li>Asks for confirmation before deleting.</li> </ul>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#even-safer-for-folders","title":"Even safer for folders:","text":"<pre><code>rm -ri myfolder/\n</code></pre> <ul> <li><code>-r</code> means recursive (needed to delete folders)</li> <li><code>-i</code> prompts for each file inside</li> </ul>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#bonus-tips-wildcards-safety","title":"\ud83c\udf1f Bonus Tips: Wildcards &amp; Safety","text":""},{"location":"lessons/01-intro_to_linux/file_system_interaction/#use-wildcards-to-select-multiple-files","title":"\ud83d\udc1a Use Wildcards to Select Multiple Files","text":"<pre><code>rm *.log\n</code></pre> <ul> <li>Deletes all <code>.log</code> files in the current directory.</li> </ul> <pre><code>cp *.txt backup/\n</code></pre> <ul> <li>Copies all <code>.txt</code> files to <code>backup/</code></li> </ul>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#wildcard-symbols","title":"Wildcard symbols:","text":"Symbol Meaning <code>*</code> Any number of characters <code>?</code> One single character"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#avoiding-data-loss","title":"\ud83d\udd12 Avoiding Data Loss","text":"<ul> <li>\ud83d\uded1 Never run <code>rm -rf /</code> \u2014 it will delete your whole system.</li> <li>\u2705 Use <code>rm -i</code> for important deletions.</li> <li>\ud83d\udcbe Always double-check the file or folder name.</li> <li>\ud83d\udce6 Consider using <code>trash-cli</code> or <code>mv</code> to a <code>Trash/</code> directory if unsure.</li> </ul>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#try-this","title":"\ud83e\uddea Try This:","text":"<pre><code>touch test.txt\necho \"Hello!\" &gt; test.txt\ncat test.txt\ncp test.txt backup.txt\nmv backup.txt archive.txt\nrm -i archive.txt\n</code></pre> <p>Each command here demonstrates file creation, viewing, copying, renaming, and deletion \u2014 interactively and safely.</p>"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#quick-reference","title":"\ud83c\udfaf Quick Reference","text":"Command Action <code>cat</code> View short file contents <code>less</code> View and scroll through files <code>cp</code> Copy files <code>mv</code> Move or rename files <code>rm</code> Delete files <code>-i</code> Prompt before delete/copy <code>*</code> / <code>?</code> Wildcard match for files"},{"location":"lessons/01-intro_to_linux/file_system_interaction/#want-to-learn-more","title":"\ud83d\udcda Want to Learn More?","text":"<p>Explore more Linux file tips and tricks in my full Medium post:</p> <p>\ud83d\udc49 View &amp; Manage Files Like a Pro on Medium</p>"},{"location":"lessons/01-intro_to_linux/linux_file_system/","title":"\ud83d\udcc1 Navigating the Linux File System","text":"<p>Before you can work with files or run scripts in Linux, you need to know where you are and how to move around. Think of your computer like a big city. Each folder is like a neighborhood, and files are the buildings inside.</p> <p>In this lesson, you'll learn three essential commands:</p> <ul> <li><code>ls</code> \u2013 list files and folders</li> <li><code>cd</code> \u2013 change directory</li> <li><code>pwd</code> \u2013 show your current location (print working directory)</li> </ul>"},{"location":"lessons/01-intro_to_linux/linux_file_system/#1-know-where-you-are-pwd","title":"\ud83e\udded 1. Know Where You Are: <code>pwd</code>","text":"<p>Use <code>pwd</code> to print your current location in the file system.</p> <p><pre><code>pwd\n````\n\nExample output:\n</code></pre> /home/username/projects <pre><code>&gt; \ud83e\udde0 Analogy: If your computer were Google Maps, `pwd` is like checking your current GPS location.\n\n---\n\n## \ud83d\udcc2 2. See What\u2019s Around You: `ls`\n\nUse `ls` to **list** the files and folders in your current directory.\n\n```bash\nls\n</code></pre></p>"},{"location":"lessons/01-intro_to_linux/linux_file_system/#common-options","title":"Common Options:","text":"<ul> <li><code>ls -l</code> \u2013 list in long format (more details)</li> <li><code>ls -a</code> \u2013 include hidden files (those starting with <code>.</code>)</li> <li><code>ls -lh</code> \u2013 human-readable sizes</li> </ul> <p>Example:</p> <pre><code>ls -lh\n</code></pre> <p>Output:</p> <pre><code>-rw-r--r-- 1 user user 1.2K Jul 6 10:30 notes.txt\ndrwxr-xr-x 2 user user 4.0K Jul 6 10:30 projects/\n</code></pre> <p>\ud83e\udde0 Analogy: <code>ls</code> is like peeking inside a folder to see what\u2019s there.</p>"},{"location":"lessons/01-intro_to_linux/linux_file_system/#3-move-between-folders-cd","title":"\ud83d\udeaa 3. Move Between Folders: <code>cd</code>","text":"<p>Use <code>cd</code> (change directory) to move around the file system.</p> <pre><code>cd foldername\n</code></pre>"},{"location":"lessons/01-intro_to_linux/linux_file_system/#examples","title":"Examples:","text":"<pre><code>cd Documents       # Go into the Documents folder\ncd ..              # Go up one level\ncd ~               # Go to your home directory\ncd /etc            # Go to an absolute path\n</code></pre> <p>\ud83e\udde0 Analogy: <code>cd</code> is like walking into a different room in your house.</p>"},{"location":"lessons/01-intro_to_linux/linux_file_system/#path-types-relative-vs-absolute","title":"\ud83e\udded Path Types: Relative vs Absolute","text":""},{"location":"lessons/01-intro_to_linux/linux_file_system/#absolute-path","title":"\ud83d\udd39 Absolute Path","text":"<ul> <li>Starts from the root <code>/</code></li> <li>Always points to the same location no matter where you are</li> </ul> <p>Example:</p> <pre><code>cd /home/username/Documents\n</code></pre> <p>Think of it as a full street address: /Country/City/Street/Building</p>"},{"location":"lessons/01-intro_to_linux/linux_file_system/#relative-path","title":"\ud83d\udd38 Relative Path","text":"<ul> <li>Based on your current location</li> <li>Shorter and faster to type if you're already nearby</li> </ul> <p>Example:</p> <pre><code>cd ../Downloads\n</code></pre> <p>Think of it like saying: \u201cGo to the house two blocks behind me.\u201d</p>"},{"location":"lessons/01-intro_to_linux/linux_file_system/#picture-this-navigating-a-sample-structure","title":"\ud83d\uddbc\ufe0f Picture this: Navigating a Sample Structure","text":"<p>Let\u2019s say this is your file system:</p> <pre><code>/\n\u251c\u2500\u2500 home\n\u2502   \u2514\u2500\u2500 username\n\u2502       \u251c\u2500\u2500 Documents\n\u2502       \u2514\u2500\u2500 Projects\n\u2502           \u2514\u2500\u2500 website\n</code></pre> <p>If you're in <code>/home/username/Projects</code>, here\u2019s what these do:</p> Command Where You Go <code>cd ..</code> <code>/home/username</code> (go up one level) <code>cd website</code> <code>/home/username/Projects/website</code> <code>cd ~/Documents</code> <code>/home/username/Documents</code> <code>cd /home/username</code> Absolute path to home"},{"location":"lessons/01-intro_to_linux/linux_file_system/#quick-recap","title":"\ud83c\udfaf Quick Recap","text":"Command What It Does <code>pwd</code> Shows your current directory <code>ls</code> Lists files and folders <code>cd</code> Moves you to another directory <p>Learning to move confidently through the Linux file system will make you faster and more effective when working with Git, scripts, or projects.</p>"},{"location":"lessons/01-intro_to_linux/linux_file_system/#want-to-learn-more","title":"\ud83d\udcda Want to Learn More?","text":"<p>Check out my detailed Linux navigation guide on Medium:</p> <p>\ud83d\udc49 Read the Full Guide on Medium</p>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/","title":"\ud83d\udda5\ufe0f Introduction to the Terminal &amp; Shells","text":"<p>If you've never used the terminal before, it might look intimidating \u2014 just a blinking cursor on a black screen. But don't worry \u2014 it's actually a powerful tool that lets you talk directly to your computer using text commands.</p>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#what-is-the-terminal","title":"\ud83d\udce6 What is the Terminal?","text":"<p>Think of the terminal as a doorway. When you open it, you're entering a direct line of communication with your computer's operating system \u2014 especially useful on Linux and macOS (and available on Windows too via WSL or PowerShell).</p> <ul> <li>It's like chatting with your computer, one line at a time.</li> <li>Instead of clicking buttons, you type commands to do things like:</li> <li>Create files or folders</li> <li>Move, copy, or delete things</li> <li>Run programs or install software</li> <li>Automate repetitive tasks</li> </ul> <p>\ud83e\udde0 Analogy: If a graphical interface is like ordering from a menu, the terminal is like being the chef in the kitchen \u2014 full control!</p>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#what-is-a-shell","title":"\ud83d\udc1a What is a Shell?","text":"<p>A shell is the program that runs inside the terminal. It reads your commands, executes them, and shows the result.</p> <p>You type commands \u279d the shell interprets them \u279d your computer does the work.</p> <p>There are many types of shells, but they all serve the same core purpose: command-line interaction.</p>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#common-shells-and-how-bash-compares","title":"\ud83d\udd01 Common Shells (and How Bash Compares)","text":"<p>Here are three of the most popular shells you\u2019ll encounter:</p> Shell Full Name Features Best For Bash Bourne Again SHell Default on most Linux distros and macOS. Stable, widely supported, perfect for scripting. Beginners, scripting Zsh Z Shell Adds features like autocompletion, suggestions, themes, and plugins. Power users, customizable environments Fish Friendly Interactive Shell User-friendly, great out of the box, no need for configuration. New users, intuitive CLI <p>\ud83d\udca1 Most tutorials and guides (including this course) use Bash because it's the most widely used and beginner-friendly.</p>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#basic-shell-interaction-examples","title":"\ud83d\udca1 Basic Shell Interaction Examples","text":"<p>Here\u2019s how you\u2019d use a shell (like Bash) to do everyday tasks:</p>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#create-a-new-folder","title":"\ud83d\udcc1 Create a new folder:","text":"<pre><code>mkdir my_project\n````\n\n### \ud83d\uddc2\ufe0f Change directory:\n\n```bash\ncd my_project\n</code></pre>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#create-a-new-file","title":"\ud83d\udcc4 Create a new file:","text":"<pre><code>touch notes.txt\n</code></pre>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#list-files-in-the-current-folder","title":"\ud83d\udcdd List files in the current folder:","text":"<pre><code>ls\n</code></pre>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#remove-a-file","title":"\u274c Remove a file:","text":"<pre><code>rm notes.txt\n</code></pre>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#shell-prompt-breakdown","title":"\ud83d\udd04 Shell Prompt Breakdown","text":"<p>When you open your terminal, you might see something like:</p> <pre><code>user@machine:~$\n</code></pre> <ul> <li><code>user</code> \u2013 Your username</li> <li><code>machine</code> \u2013 The name of your computer</li> <li><code>~</code> \u2013 Your current directory (home folder)</li> <li><code>$</code> \u2013 Means you're a regular user (a <code>#</code> means you're root/admin)</li> </ul> <p>You type your command after the <code>$</code>.</p>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#try-this-hello-from-the-shell","title":"\ud83e\uddea Try This: Hello from the Shell!","text":"<p>Open your terminal and type:</p> <pre><code>echo \"Hello, world!\"\n</code></pre> <p>This tells the shell to print text to the screen. It's one of the simplest and most used testing commands.</p>"},{"location":"lessons/01-intro_to_linux/terminals_and_shells/#summary","title":"\ud83c\udfaf Summary","text":"<ul> <li>The terminal is your command-line workspace.</li> <li>The shell interprets your commands \u2014 Bash is the most common one.</li> <li>You can use shells to create, edit, move, and automate things on your computer.</li> <li>Bash is widely supported, making it the perfect place to start before exploring Zsh or Fish.</li> </ul>"},{"location":"lessons/01-intro_to_linux/what_is_linux/","title":"\ud83d\udc27 What is Linux?","text":"<p>Linux is a powerful, open-source operating system (OS) used by millions of developers, system admins, companies, and even your favorite tech products like Android phones or smart TVs. It\u2019s the backbone of most of the internet \u2014 powering servers, cloud infrastructure, supercomputers, and more.</p>"},{"location":"lessons/01-intro_to_linux/what_is_linux/#a-brief-history","title":"\ud83d\udcdc A Brief History","text":"<p>Imagine Linux as a rebellious cousin of Windows and macOS \u2014 one who didn\u2019t want to be locked down.</p> <ul> <li>In 1991, a Finnish student named Linus Torvalds wanted to build a free operating system kernel as a hobby.</li> <li>He posted about it on an online forum, and developers from around the world joined in.</li> <li>What started as a small project evolved into one of the largest and most influential open-source movements in tech history.</li> </ul> <p>\ud83d\udd27 \u201cJust for fun\u201d \u2014 that's how Linux began. Now it runs the majority of servers on Earth.</p>"},{"location":"lessons/01-intro_to_linux/what_is_linux/#linux-architecture-simplified","title":"\ud83e\uddf1 Linux Architecture (Simplified)","text":"<p>To understand Linux, let\u2019s compare it to a layered cake \ud83c\udf70:</p> <ol> <li> <p>Hardware Layer    \u2013 Your actual computer components (CPU, memory, hard drive, etc.)</p> </li> <li> <p>Kernel Layer (The Heart)    \u2013 The Linux kernel manages communication between software and hardware.    \u2013 It handles memory, processes, device drivers, and file systems.</p> </li> <li> <p>Shell Layer (The Translator)    \u2013 The shell lets you talk to the OS \u2014 either through text (Bash) or graphical interfaces.    \u2013 Think of it as a command-line interpreter.</p> </li> <li> <p>Utilities &amp; Applications Layer    \u2013 Programs like <code>ls</code>, <code>cd</code>, or <code>vim</code> \u2014 these make Linux usable.    \u2013 GUIs (graphical interfaces) like GNOME or KDE live here too.</p> </li> </ol>"},{"location":"lessons/01-intro_to_linux/what_is_linux/#common-linux-distributions-distros","title":"\ud83e\uddec Common Linux Distributions (Distros)","text":"<p>A distro is like a flavor or version of Linux \u2014 kind of like how ice cream comes in different varieties \ud83c\udf66.</p> <p>Here are some of the most popular:</p> Distro Best For Description Ubuntu Beginners, Devs Friendly, widely supported Debian Stability Rock-solid base for many distros Fedora Cutting-edge tech Up-to-date, backed by Red Hat Arch Linux Advanced users Minimalistic, DIY-style Linux Linux Mint Windows switchers Clean UI, based on Ubuntu Kali Linux Cybersecurity, Hacking Comes with pre-installed security tools <p>\ud83e\udde0 Analogy: If Linux is the engine of a car, then a distro is the full car model \u2014 with steering, dashboard, and style.</p>"},{"location":"lessons/01-intro_to_linux/what_is_linux/#real-world-use-cases-of-linux","title":"\ud83c\udf0d Real-World Use Cases of Linux","text":"<ul> <li>\ud83d\udda5\ufe0f Web Servers: Most of the internet runs on Linux-based servers (Apache, NGINX).</li> <li>\ud83d\udcf1 Mobile Devices: Android is built on the Linux kernel.</li> <li>\u2601\ufe0f Cloud &amp; DevOps: AWS, Google Cloud, and Azure love Linux.</li> <li>\ud83c\udfae Gaming &amp; Media: Steam Deck runs Linux. It also powers smart TVs and routers.</li> <li>\ud83e\uddea Scientific Computing: Supercomputers and research labs rely on it.</li> <li>\ud83d\udc69\u200d\ud83d\udcbb Development Environments: Programmers use it for coding, automation, and learning.</li> </ul>"},{"location":"lessons/01-intro_to_linux/what_is_linux/#why-should-you-care","title":"\ud83d\udccc Why Should You Care?","text":"<p>If you're learning GitHub, you\u2019ll often deal with: - Linux-based terminal commands - Servers and deployment environments - Automation scripts (Bash, Python) - CI/CD pipelines (GitHub Actions often use Ubuntu runners)</p> <p>Learning Linux unlocks a deeper understanding of how your code runs in the real world.</p>"},{"location":"lessons/01-intro_to_linux/what_is_linux/#want-to-learn-more","title":"\ud83d\udcda Want to Learn More?","text":"<p>Check out my detailed Getting started with linux on Medium, where we dive deep into liux. I'll walk you through installation, navigation, setting up your new linux environment and more:</p> <p>\ud83d\udc49 Read the Full Guide on Medium</p>"},{"location":"lessons/02-bash_basics/comments_and_output/","title":"\ud83d\udcac Comments and <code>echo</code> in Bash Scripts","text":""},{"location":"lessons/02-bash_basics/comments_and_output/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Use comments (<code>#</code>) to annotate and document scripts.</li> <li>Use <code>echo</code> to print messages to the terminal.</li> <li>Follow best practices for spacing, formatting, and quoting in output.</li> </ul>"},{"location":"lessons/02-bash_basics/comments_and_output/#part-1-using-comments-in-bash-scripts","title":"\ud83e\uddfe Part 1: Using Comments in Bash Scripts","text":""},{"location":"lessons/02-bash_basics/comments_and_output/#what-are-comments","title":"\u2705 What Are Comments?","text":"<p>In Bash, anything after a <code>#</code> is a comment. The shell ignores it.</p> <pre><code># This is a comment\necho \"Hello!\"  # This comment explains the line\n</code></pre>"},{"location":"lessons/02-bash_basics/comments_and_output/#why-use-comments","title":"\ud83e\udde0 Why Use Comments?","text":"<ul> <li>To explain what the code does</li> <li>To describe why something is done a certain way</li> <li>To make your script understandable \u2014 even to your future self!</li> </ul>"},{"location":"lessons/02-bash_basics/comments_and_output/#commenting-tips","title":"\ud83e\ude84 Commenting Tips","text":"<p>\u2705 Use full sentences for clarity:</p> <pre><code># This line displays the current date\ndate\n</code></pre> <p>\u2705 Add a comment before each block of logic:</p> <pre><code># Check if user is root\nif [ \"$USER\" == \"root\" ]; then\n  echo \"You're the boss!\"\nfi\n</code></pre> <p>\u2705 Use visual dividers for large scripts:</p> <pre><code>#######################\n# Backup Section Start\n#######################\n</code></pre>"},{"location":"lessons/02-bash_basics/comments_and_output/#part-2-using-echo-for-output","title":"\ud83d\udce3 Part 2: Using <code>echo</code> for Output","text":"<p>The <code>echo</code> command prints text or variables to the terminal.</p>"},{"location":"lessons/02-bash_basics/comments_and_output/#example","title":"\ud83e\uddea Example:","text":"<pre><code>echo \"Hello, world!\"\n</code></pre>"},{"location":"lessons/02-bash_basics/comments_and_output/#with-variables","title":"\ud83d\udccc With Variables:","text":"<pre><code>name=\"Morty Smith\"\necho \"Hi, $name!\"\n</code></pre> <p>Output:</p> <pre><code>Hi, Morty Smith!\n</code></pre>"},{"location":"lessons/02-bash_basics/comments_and_output/#formatting-output-with-echo","title":"\u2728 Formatting Output with <code>echo</code>","text":""},{"location":"lessons/02-bash_basics/comments_and_output/#newlines","title":"\ud83d\udd39 Newlines:","text":"<p>By default, <code>echo</code> adds a newline at the end:</p> <pre><code>echo \"Line 1\"\necho \"Line 2\"\n</code></pre> <p>Output:</p> <pre><code>Line 1\nLine 2\n</code></pre> <p>Use <code>-n</code> to suppress the newline:</p> <pre><code>echo -n \"Enter your name: \"\n</code></pre> <p>Output:</p> <pre><code>Enter your name: _  # cursor stays on same line\n</code></pre>"},{"location":"lessons/02-bash_basics/comments_and_output/#tabs-and-escape-characters","title":"\ud83d\udd39 Tabs and Escape Characters","text":"<p>Use <code>-e</code> to enable escaped characters like <code>\\t</code> (tab) and <code>\\n</code> (newline):</p> <pre><code>echo -e \"Name:\\Morty\\nStatus:\\tLearning Bash\"\n</code></pre> <p>Output:</p> <pre><code>Name:   Morty\nStatus: Learning Bash\n</code></pre>"},{"location":"lessons/02-bash_basics/comments_and_output/#quoting-best-practices","title":"\ud83e\uddfc Quoting Best Practices","text":"Situation Use Quotes? Why? Printing plain text \u2705 Yes Handles spaces and special chars Echoing a variable \u2705 Yes Avoids word splitting/globbing Printing shell output \u2705 Always Prevents breaking due to spaces"},{"location":"lessons/02-bash_basics/comments_and_output/#examples","title":"\ud83d\udd39 Examples","text":"<p>\u2705 Good:</p> <pre><code>echo \"Your home directory is: $HOME\"\n</code></pre> <p>\u274c Risky:</p> <pre><code>echo Your home directory is: $HOME\n</code></pre> <p>May break if <code>$HOME</code> has spaces (unlikely, but still risky style).</p>"},{"location":"lessons/02-bash_basics/comments_and_output/#common-echo-mistakes","title":"\u2757 Common <code>echo</code> Mistakes","text":"Mistake What Happens Fix <code>echo Hello $name!</code> Might not expand as expected Use quotes: <code>echo \"Hello $name!\"</code> Forgetting <code>-e</code> <code>\\n</code> and <code>\\t</code> are printed literally Use <code>-e</code> for escaped characters Not quoting variables Spaces break formatting Always quote variables in <code>echo</code>"},{"location":"lessons/02-bash_basics/comments_and_output/#bonus-tip-echo-vs-printf","title":"\ud83e\udde0 Bonus Tip: Echo vs Printf","text":"<p>For more precise formatting, Bash also supports <code>printf</code>, which works like C-style formatting:</p> <pre><code>printf \"Name: %s\\nAge: %d\\n\" \"Korvo\" 25\n</code></pre> <p>But for 95% of scripts, <code>echo</code> is simpler and good enough.</p>"},{"location":"lessons/02-bash_basics/comments_and_output/#summary","title":"\ud83c\udfc1 Summary","text":"Feature Command Comment <code># This is a note</code> Basic echo <code>echo \"Hello!\"</code> No newline <code>echo -n \"Prompt: \"</code> Escaped output <code>echo -e \"Line1\\nLine2\"</code> Tabs <code>echo -e \"Name:\\tValue\"</code>"},{"location":"lessons/02-bash_basics/comments_and_output/#best-practices-recap","title":"\ud83d\udccc Best Practices Recap","text":"<ul> <li>\u2705 Comment your code generously</li> <li>\u2705 Use <code>echo</code> for clear, clean output</li> <li>\u2705 Always wrap echoed text in quotes</li> <li>\u2705 Use <code>-e</code> for newlines and tabs</li> <li>\u2705 Test formatting to ensure clean output</li> </ul>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/","title":"\ud83d\udd30 The Shebang (<code>#!</code>) and Making Scripts Executable with <code>chmod +x</code>","text":""},{"location":"lessons/02-bash_basics/permissions_and_shebang/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, students will be able to:</p> <ul> <li>Understand what the shebang (<code>#!</code>) line does in a script.</li> <li>Know why it's important for script execution.</li> <li>Use <code>chmod +x</code> to make scripts executable.</li> <li>Identify and fix common mistakes.</li> </ul>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#what-is-the-shebang","title":"\ud83d\udc1a What Is the Shebang (<code>#!</code>)?","text":"<p>The shebang is the very first line in a script file. It looks like this:</p> <pre><code>#!/bin/bash\n</code></pre>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#breakdown","title":"\ud83d\udd0d Breakdown:","text":"<ul> <li><code>#!</code> is called the shebang.</li> <li><code>/bin/bash</code> is the path to the Bash shell (or interpreter).</li> </ul>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#what-it-means","title":"\ud83e\udde0 What It Means:","text":"<p>\u201cUse this program to run the rest of this file.\u201d</p>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#why-is-the-shebang-important","title":"\ud83d\udccc Why Is the Shebang Important?","text":"<p>Without the shebang:</p> <ul> <li>The system might not know how to run the script.</li> <li>It may try to use the default shell, which isn\u2019t always Bash.</li> <li>This can cause bugs if your script uses Bash-specific syntax like <code>[[ ... ]]</code> or <code>(( ... ))</code>.</li> </ul> <p>With the shebang:</p> <ul> <li>The system knows exactly which interpreter to use \u2014 no guessing.</li> </ul>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#common-shebang-examples","title":"\u2728 Common Shebang Examples","text":"Interpreter Shebang Line Use Case Bash <code>#!/bin/bash</code> Bash scripts Python <code>#!/usr/bin/python3</code> Python scripts Node.js <code>#!/usr/bin/env node</code> JavaScript (Node.js) scripts Portable Bash <code>#!/usr/bin/env bash</code> More flexible on different systems <p>\u2705 <code>#!/usr/bin/env bash</code> is more portable, especially across different Linux distributions or macOS.</p>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#making-your-script-executable-with-chmod-x","title":"\ud83d\udee0\ufe0f Making Your Script Executable with <code>chmod +x</code>","text":"<p>By default, new <code>.sh</code> files aren\u2019t executable. You must explicitly allow them to be run like programs.</p>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#use-this-command","title":"\ud83e\ude9b Use this command:","text":"<pre><code>chmod +x script_name.sh\n</code></pre> <p>This adds execute permission for the file owner.</p>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#example","title":"\ud83e\uddea Example:","text":"<pre><code>nano hello.sh\n</code></pre> <p>Paste:</p> <pre><code>#!/bin/bash\necho \"Hello, world!\"\n</code></pre> <p>Save and exit. Then:</p> <pre><code>chmod +x hello.sh\n./hello.sh\n</code></pre> <p>Expected output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#understanding-permissions-with-ls-l","title":"\ud83d\udd10 Understanding Permissions with <code>ls -l</code>","text":"<p>Run:</p> <pre><code>ls -l hello.sh\n</code></pre> <p>Output before <code>chmod +x</code>:</p> <pre><code>-rw-r--r-- 1 user user 32 Jul 7 16:30 hello.sh\n</code></pre> <p>After:</p> <pre><code>-rwxr-xr-x 1 user user 32 Jul 7 16:30 hello.sh\n</code></pre> <p>\ud83d\udfe2 <code>x</code> means executable \ud83d\udfe2 <code>rwx</code> means the file owner (you) can read, write, and execute</p>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#common-errors-and-how-to-fix-them","title":"\u26a0\ufe0f Common Errors and How to Fix Them","text":"\ud83e\udde8 Error \ud83d\udca1 Cause \u2705 Fix <code>Permission denied</code> Trying to run a script without execute permissions Run <code>chmod +x script.sh</code> <code>command not found</code> You ran <code>script.sh</code> instead of <code>./script.sh</code> Use <code>./script.sh</code> or <code>bash script.sh</code> <code>bad interpreter: No such file or directory</code> Shebang points to a non-existent path (e.g., typo or wrong system) Check with <code>which bash</code> and fix the path Nothing happens Script doesn\u2019t have a shebang or executable bit Add <code>#!/bin/bash</code> and <code>chmod +x</code>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Always include a shebang at the very top of the file.</li> <li>Use <code>#!/usr/bin/env bash</code> for portability.</li> <li>Make your script executable once \u2014 no need to repeat <code>chmod +x</code> every time.</li> <li>Use <code>ls -l</code> to confirm permissions.</li> </ul>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#quick-test","title":"\ud83e\uddea Quick Test","text":"<p>Create a script called <code>report.sh</code>:</p> <pre><code>#!/bin/bash\necho \"Generating system report...\"\nuptime\ndf -h\n</code></pre> <p>Run:</p> <pre><code>chmod +x report.sh\n./report.sh\n</code></pre> <p>Expected output:</p> <pre><code>Generating system report...\n 16:33:29 up 2 days,  4:01,  1 user,  load average: 0.17, 0.10, 0.09\nFilesystem      Size  Used Avail Use% Mounted on\n...\n</code></pre>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#bonus-tip-run-without-shebang","title":"\ud83e\udde0 Bonus Tip: Run Without Shebang?","text":"<p>Yes, you can run a script without a shebang using:</p> <pre><code>bash script.sh\n</code></pre> <p>But that\u2019s not recommended long-term. It\u2019s better to:</p> <ul> <li>Include the shebang</li> <li>Set execute permissions</li> <li>Run it like a native program: <code>./script.sh</code></li> </ul>"},{"location":"lessons/02-bash_basics/permissions_and_shebang/#recap","title":"\ud83c\udfc1 Recap","text":"<ul> <li>The shebang tells Linux which interpreter to use.</li> <li><code>chmod +x</code> gives your script execute permission.</li> <li>Always test with <code>./script.sh</code> and check for typos in the shebang path.</li> <li>Without a shebang, you\u2019re relying on luck. Don\u2019t.</li> </ul>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/","title":"\ud83d\udc1a What Is a Bash Script?","text":""},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#learning-objectives","title":"\ud83e\udde0 Learning Objectives:","text":"<p>By the end of this lesson, students will be able to:</p> <ul> <li>Understand what a Bash script is and how it works.</li> <li>Know when and why to use a Bash script over interactive commands.</li> <li>Distinguish between interactive shell usage and scripting.</li> <li>See real-world examples of automating tasks with Bash.</li> </ul>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#what-is-a-bash-script_1","title":"\ud83d\udd39 What is a Bash Script?","text":"<p>A Bash script is simply a text file that contains a series of Bash commands, which are executed in sequence.</p> <p>It\u2019s like writing down all the commands you\u2019d normally type in a terminal\u2014then letting the system run them automatically for you.</p> <p>It usually starts with a special line called a shebang:</p> <pre><code>#!/bin/bash\n</code></pre> <p>This tells the system: \u201cUse Bash to interpret this file.\u201d</p>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#example","title":"\ud83d\udce6 Example:","text":"<pre><code>#!/bin/bash\n\necho \"Hello, world!\"\ndate\nuptime\n</code></pre> <p>Save it as <code>hello.sh</code>, give it execute permission with:</p> <pre><code>chmod +x hello.sh\n</code></pre> <p>Then run it:</p> <pre><code>./hello.sh\n</code></pre> <p>You\u2019ll see:</p> <pre><code>Hello, world!\nMon Jul  7 15:03:42 UTC 2025\n 15:03:42 up  2:01,  2 users,  load average: 0.23, 0.18, 0.16\n</code></pre>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#bash-scripts-vs-running-commands-interactively","title":"\ud83d\udd04 Bash Scripts vs. Running Commands Interactively","text":"Feature Interactive Shell Bash Script Mode One command at a time Batch of commands in a file Use Case One-off, ad-hoc tasks Repetitive, automated, scheduled tasks Persistence Commands vanish after session Stored, reusable Error Handling Manual Can include automated logic Scalability Low High"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#analogy","title":"\ud83e\udd14 Analogy:","text":"<p>Using the interactive shell is like making coffee manually every day. Writing a Bash script is like programming your coffee machine to do it for you at 7:00 AM.</p>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#when-should-you-use-a-bash-script","title":"\ud83e\uddf0 When Should You Use a Bash Script?","text":"<p>Use a Bash script when:</p> <ul> <li>You're repeating the same terminal commands often.</li> <li>You want automation (e.g., backups, builds, deployments).</li> <li>You need to chain multiple commands together.</li> <li>You want logic (e.g., conditionals or loops).</li> <li>You're working with cron jobs (scheduled tasks).</li> </ul> <p>Don't use a Bash script when:</p> <ul> <li>The task is trivial or one-off.</li> <li>You need GUI interaction or heavy data manipulation (e.g., Python or Perl might be better).</li> </ul>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#real-life-bash-scripting-examples","title":"\ud83d\ude80 Real-Life Bash Scripting Examples","text":""},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#1-daily-backup-script","title":"1. Daily Backup Script","text":"<pre><code>#!/bin/bash\n\nSOURCE=\"/home/user/documents\"\nDEST=\"/mnt/backup/$(date +%F)\"\nmkdir -p \"$DEST\"\ncp -r \"$SOURCE\" \"$DEST\"\necho \"Backup completed to $DEST\"\n</code></pre> <p>Use case: Automatically back up your documents folder every day.</p>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#2-system-update-cleanup-script","title":"2. System Update &amp; Cleanup Script","text":"<pre><code>#!/bin/bash\n\necho \"Updating system...\"\nsudo apt update &amp;&amp; sudo apt upgrade -y\necho \"Removing unused packages...\"\nsudo apt autoremove -y\n</code></pre> <p>Use case: Regular maintenance of your Linux system.</p>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#3-bulk-rename-files","title":"3. Bulk Rename Files","text":"<pre><code>#!/bin/bash\n\ni=1\nfor file in *.jpg; do\n  mv \"$file\" \"image_$i.jpg\"\n  ((i++))\ndone\n</code></pre> <p>Use case: Rename photos in a directory for consistency.</p>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#4-monitor-internet-connection","title":"4. Monitor Internet Connection","text":"<pre><code>#!/bin/bash\n\nping -c 1 google.com &gt; /dev/null\n\nif [ $? -eq 0 ]; then\n  echo \"Internet is up\"\nelse\n  echo \"Internet is down\"\nfi\n</code></pre> <p>Use case: Check if your internet is working and log the result.</p>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#5-cron-job-bash-script-combo","title":"5. Cron Job + Bash Script Combo","text":"<p>You can schedule any Bash script to run at specific intervals using <code>cron</code>:</p> <pre><code>crontab -e\n</code></pre> <p>Add:</p> <pre><code>0 2 * * * /home/user/backup.sh\n</code></pre> <p>Use case: Run your backup script daily at 2 AM.</p>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#best-practices-for-bash-scripts","title":"\u2705 Best Practices for Bash Scripts","text":"<ul> <li>Always start with <code>#!/bin/bash</code>.</li> <li>Comment your code! (<code># This line does xyz</code>)</li> <li>Use <code>set -e</code> to stop on the first error.</li> <li>Use <code>\"$VARIABLE\"</code> in double quotes to avoid globbing/word splitting issues.</li> <li>Make scripts executable (<code>chmod +x script.sh</code>).</li> <li>Keep scripts modular and reusable.</li> </ul>"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#common-mistakes","title":"\ud83d\udd0d Common Mistakes","text":"Mistake What Happens Missing <code>#!/bin/bash</code> The script may be interpreted by the wrong shell Not quoting variables May break filenames with spaces Using <code>=</code> instead of <code>==</code> in <code>[[ ... ]]</code> Leads to syntax errors Forgetting to <code>chmod +x</code> Script won\u2019t run directly"},{"location":"lessons/02-bash_basics/what_is_bash_scripting/#summary","title":"\ud83c\udfc1 Summary","text":"<ul> <li>Bash scripts automate tasks you'd otherwise do manually in the shell.</li> <li>They\u2019re perfect for repetitive, complex, or scheduled tasks.</li> <li>Scripting is where Linux power users live and breathe.</li> <li>Practice turning everyday tasks into scripts\u2014automation is addictive!</li> </ul>"},{"location":"lessons/02-bash_basics/your_first_script/","title":"\ud83d\udc23 Creating and Running Your First Bash Script","text":""},{"location":"lessons/02-bash_basics/your_first_script/#learning-objectives","title":"\ud83e\udde0 Learning Objectives:","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Know how to create a <code>.sh</code> file using a text editor.</li> <li>Understand what the shebang line does.</li> <li>Be able to run a script using <code>bash</code> and <code>./</code>.</li> <li>Learn how to set the right file permissions using <code>chmod</code>.</li> </ul>"},{"location":"lessons/02-bash_basics/your_first_script/#what-you-need","title":"\ud83d\udd27 What You Need:","text":"<ul> <li>A Linux terminal (or WSL, macOS terminal, Codespaces, or Linux VM)</li> <li>A basic text editor (like <code>nano</code>, <code>vim</code>, or VS Code)</li> </ul>"},{"location":"lessons/02-bash_basics/your_first_script/#step-1-create-a-new-script-file","title":"\ud83d\udcc1 Step 1: Create a New Script File","text":"<p>Let\u2019s start by creating a file named <code>first_script.sh</code>.</p> <p>In your terminal, type:</p> <pre><code>nano first_script.sh\n</code></pre> <p>This opens the Nano editor.</p>"},{"location":"lessons/02-bash_basics/your_first_script/#step-2-write-the-script","title":"\u270d\ufe0f Step 2: Write the Script","text":"<p>Inside <code>nano</code>, type the following:</p> <pre><code>#!/bin/bash\n\necho \"Hello, Bash!\"\necho \"Today is: $(date)\"\necho \"Your current directory is: $(pwd)\"\n</code></pre>"},{"location":"lessons/02-bash_basics/your_first_script/#whats-happening-here","title":"\ud83e\udde0 What\u2019s Happening Here?","text":"<ul> <li><code>#!/bin/bash</code>: This tells the system to use Bash to run this file.</li> <li><code>echo</code>: Prints text to the terminal.</li> <li><code>$(date)</code>: Executes the <code>date</code> command and inserts its output.</li> <li><code>$(pwd)</code>: Shows the current working directory.</li> </ul>"},{"location":"lessons/02-bash_basics/your_first_script/#step-3-save-and-exit","title":"\ud83d\udcbe Step 3: Save and Exit","text":"<p>To save in Nano:</p> <ul> <li>Press <code>Ctrl + O</code> (write out)</li> <li>Press <code>Enter</code> (confirm file name)</li> <li>Then press <code>Ctrl + X</code> to exit</li> </ul> <p>Your script is now saved!</p>"},{"location":"lessons/02-bash_basics/your_first_script/#step-4-run-the-script","title":"\u2699\ufe0f Step 4: Run the Script","text":"<p>There are two ways to run a Bash script:</p>"},{"location":"lessons/02-bash_basics/your_first_script/#option-1-run-with-bash","title":"\ud83d\udd39 Option 1: Run with <code>bash</code>","text":"<pre><code>bash first_script.sh\n</code></pre> <p>This works even if the file isn\u2019t marked executable.</p>"},{"location":"lessons/02-bash_basics/your_first_script/#option-2-make-it-executable-run-with","title":"\ud83d\udd39 Option 2: Make It Executable &amp; Run with <code>./</code>","text":""},{"location":"lessons/02-bash_basics/your_first_script/#1-make-it-executable","title":"1. Make it executable:","text":"<pre><code>chmod +x first_script.sh\n</code></pre> <p>This tells Linux: \u201cHey, this file can be executed like a program.\u201d</p>"},{"location":"lessons/02-bash_basics/your_first_script/#2-run-it","title":"2. Run it:","text":"<pre><code>./first_script.sh\n</code></pre> <p>The <code>./</code> means: \u201cRun this file in the current directory.\u201d</p>"},{"location":"lessons/02-bash_basics/your_first_script/#output-example","title":"\ud83e\uddea Output Example:","text":"<pre><code>Hello, Bash!\nToday is: Mon Jul  7 16:02:12 UTC 2025\nYour current directory is: /home/student\n</code></pre> <p>\ud83c\udf89 You just ran your first Bash script!</p>"},{"location":"lessons/02-bash_basics/your_first_script/#quick-note-on-file-permissions","title":"\ud83d\udd10 Quick Note on File Permissions","text":"<p>Use <code>ls -l</code> to view permissions:</p> <pre><code>ls -l first_script.sh\n</code></pre> <p>Output before <code>chmod +x</code>:</p> <pre><code>-rw-r--r-- 1 user user  72 Jul  7 16:00 first_script.sh\n</code></pre> <p>After <code>chmod +x</code>:</p> <pre><code>-rwxr-xr-x 1 user user  72 Jul  7 16:00 first_script.sh\n</code></pre> <p>Notice the <code>x</code> \u2014 it means executable.</p>"},{"location":"lessons/02-bash_basics/your_first_script/#best-practices-for-beginners","title":"\ud83e\uddfc Best Practices for Beginners","text":"<ul> <li>Always start with <code>#!/bin/bash</code></li> <li>Use comments to describe steps: <code># This line prints the date</code></li> <li>Test your script by running it both with <code>bash</code> and <code>./</code></li> <li>Stick to simple commands as you build confidence</li> </ul>"},{"location":"lessons/02-bash_basics/your_first_script/#common-errors-fixes","title":"\ud83d\udee0\ufe0f Common Errors &amp; Fixes","text":"\u274c Mistake \ud83d\udca1 Fix <code>Permission denied</code> when using <code>./script.sh</code> Run <code>chmod +x script.sh</code> first <code>command not found</code> Double-check your syntax or path Forgetting <code>#!/bin/bash</code> Script may run with the wrong shell"},{"location":"lessons/02-bash_basics/your_first_script/#bonus-tip-add-some-flair","title":"\ud83e\udde0 Bonus Tip: Add Some Flair","text":"<p>You can personalize your script with more system info:</p> <pre><code>#!/bin/bash\n\necho \"Hi $USER!\"\necho \"You're currently in: $(pwd)\"\necho \"Logged in since: $(who -b)\"\n</code></pre>"},{"location":"lessons/02-bash_basics/your_first_script/#recap","title":"\ud83c\udfc1 Recap","text":"<ul> <li>\u2705 Create a <code>.sh</code> file</li> <li>\u2705 Start with <code>#!/bin/bash</code></li> <li>\u2705 Save and close the file</li> <li>\u2705 Run with <code>bash script.sh</code> or make it executable and run with <code>./script.sh</code></li> <li>\u2705 Use <code>chmod +x</code> to grant execution permission</li> </ul>"},{"location":"lessons/03-control_flow/charachter_manupilation/","title":"\ud83e\uddf5 Quotes, Escaping, and String Handling in Bash","text":""},{"location":"lessons/03-control_flow/charachter_manupilation/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Understand the difference between single (<code>'</code>) and double (<code>\"</code>) quotes.</li> <li>Know how to escape special characters like <code>$</code>, <code>\"</code>, <code>\\</code>, and spaces.</li> <li>Apply best practices to avoid quoting and string-related bugs.</li> </ul>"},{"location":"lessons/03-control_flow/charachter_manupilation/#1-the-difference-single-vs-double-quotes","title":"\ud83d\udd24 1. The Difference: <code>'Single'</code> vs. <code>\"Double\"</code> Quotes","text":"Feature Single Quotes <code>'...'</code> Double Quotes <code>\"...\"</code> Variables expanded \u274c No \u2705 Yes Command substitution \u274c No \u2705 Yes Escaping special chars Not needed inside Sometimes needed Literal text \u2705 Everything is preserved Allows interpolation"},{"location":"lessons/03-control_flow/charachter_manupilation/#example-variable-expansion","title":"\ud83e\uddea Example: Variable Expansion","text":"<pre><code>name=\"Korvo\"\n\necho 'Hello, $name'   # Output: Hello, $name\necho \"Hello, $name\"   # Output: Hello, Korvo\n</code></pre>"},{"location":"lessons/03-control_flow/charachter_manupilation/#example-command-substitution","title":"\ud83e\uddea Example: Command Substitution","text":"<pre><code>echo 'Today is $(date)'   # Output: Today is $(date)\necho \"Today is $(date)\"   # Output: Today is Mon Jul 7 ...\n</code></pre> <p>\ud83d\udd01 Single quotes are for literal text. \ud83d\udd01 Double quotes let Bash interpret things inside.</p>"},{"location":"lessons/03-control_flow/charachter_manupilation/#2-escaping-special-characters","title":"\ud83e\uddfc 2. Escaping Special Characters","text":"<p>Sometimes you need to use characters that Bash treats specially \u2014 like <code>$</code>, <code>\"</code>, <code>'</code>, <code>\\</code>, <code>*</code>, <code>!</code>, or even a space.</p> <p>You \"escape\" them with a backslash (<code>\\</code>).</p>"},{"location":"lessons/03-control_flow/charachter_manupilation/#examples","title":"\ud83d\udccc Examples","text":""},{"location":"lessons/03-control_flow/charachter_manupilation/#dollar-sign","title":"\ud83e\ude99 Dollar Sign (<code>$</code>)","text":"<pre><code>echo \"Price: \\$10\"     # Output: Price: $10\n</code></pre>"},{"location":"lessons/03-control_flow/charachter_manupilation/#quotes-inside-quotes","title":"\ud83e\udde0 Quotes inside Quotes","text":"<p>Double inside double:</p> <pre><code>echo \"He said, \\\"Hello there!\\\"\"\n</code></pre> <p>Single inside single (harder):</p> <p>You must end the quote, use an escaped <code>'</code>, then reopen:</p> <pre><code>echo 'It'\\''s a nice day.'\n</code></pre> <p>But easier with double quotes:</p> <pre><code>echo \"It's a nice day.\"\n</code></pre>"},{"location":"lessons/03-control_flow/charachter_manupilation/#backslashes","title":"\ud83c\udf0c Backslashes","text":"<pre><code>echo \"Path: C:\\\\Users\\\\Korvo\"\n</code></pre>"},{"location":"lessons/03-control_flow/charachter_manupilation/#3-best-practices-to-avoid-string-bugs","title":"\ud83e\uddf0 3. Best Practices to Avoid String Bugs","text":"<p>\u2705 Always quote variables:</p> <pre><code>echo \"$filename\"      # Safe\necho $filename        # Risky if value has spaces\n</code></pre> <p>\u2705 Use double quotes for most things:</p> <pre><code>echo \"Welcome, $USER\"\n</code></pre> <p>\u2705 Use single quotes for static, literal text:</p> <pre><code>echo 'The value of $USER will not be shown here.'\n</code></pre> <p>\u2705 Escape characters you want printed literally:</p> <pre><code>echo \"5 &gt; 3 is true\"         # Fine\necho \"Use the \\$PATH variable\"  # Escapes the dollar sign\n</code></pre>"},{"location":"lessons/03-control_flow/charachter_manupilation/#4-common-bugs-and-fixes","title":"\ud83d\udd02 4. Common Bugs and Fixes","text":"\u274c Bug \ud83d\ude2c What Happens \u2705 Fix <code>echo $var</code> with spaces Word splitting <code>echo \"$var\"</code> <code>echo '$USER'</code> No expansion Use <code>\"</code>, not <code>'</code> <code>echo \"My folder is ~/Documents\"</code> Doesn\u2019t expand <code>~</code> Use <code>\"$HOME/Documents\"</code> Escaping too much Over-escaping breaks intent Use wisely: only escape what you must"},{"location":"lessons/03-control_flow/charachter_manupilation/#real-example-breaking-without-quotes","title":"\ud83e\uddea Real Example: Breaking Without Quotes","text":"<pre><code>filename=\"My Documents\"\n\n# Wrong\ncp $filename /backup/\n\n# Bash sees:\n# cp My Documents /backup/\n# \u2192 error: cp: cannot stat 'My': No such file or directory\n\n# Right\ncp \"$filename\" /backup/\n</code></pre>"},{"location":"lessons/03-control_flow/charachter_manupilation/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Quote Type Use Case Expands Variables Expands Commands <code>'Single'</code> Literal text \u274c \u274c <code>\"Double\"</code> Dynamic text with variables \u2705 \u2705 No quotes Rarely safe \u2705 \u2705"},{"location":"lessons/03-control_flow/charachter_manupilation/#bonus-tip-heredoc-for-multi-line-text","title":"\ud83e\udde0 Bonus Tip: Heredoc for Multi-line Text","text":"<pre><code>cat &lt;&lt;EOF\nHello, $USER!\nToday is $(date)\nEOF\n</code></pre> <p>Use <code>&lt;&lt;'EOF'</code> (single quoted) if you don\u2019t want variable expansion.</p>"},{"location":"lessons/03-control_flow/operations/","title":"\u2795 Arithmetic in Bash","text":""},{"location":"lessons/03-control_flow/operations/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Perform integer arithmetic using <code>let</code>, <code>$(( ))</code>, and <code>expr</code></li> <li>Use increment (<code>++</code>) and decrement (<code>--</code>) operations</li> <li>Understand Bash's math limitations (no float support)</li> <li>Apply arithmetic in practical scripts</li> </ul>"},{"location":"lessons/03-control_flow/operations/#bash-and-math-quick-overview","title":"\ud83d\udd22 Bash and Math: Quick Overview","text":"<p>Bash supports basic integer arithmetic, including:</p> <ul> <li>Addition: <code>+</code></li> <li>Subtraction: <code>-</code></li> <li>Multiplication: <code>*</code></li> <li>Division: <code>/</code></li> <li>Modulo (remainder): <code>%</code></li> </ul> <p>\ud83d\udcdb But: Bash does not support floating-point numbers \u2014 math is limited to integers only!</p>"},{"location":"lessons/03-control_flow/operations/#1-using-arithmetic-expansion-preferred","title":"\ud83e\uddee 1. Using <code>$(( ))</code> \u2014 Arithmetic Expansion (Preferred)","text":"<p>This is the most common and modern way to do math in Bash.</p> <pre><code>sum=$((5 + 3))\necho \"Sum: $sum\"\n</code></pre> <p>You can use variables directly:</p> <pre><code>a=10\nb=4\nresult=$((a * b))\necho \"Result: $result\"\n</code></pre> <p>\u2705 Works inline, easy to read, no need for quotes or escaping.</p>"},{"location":"lessons/03-control_flow/operations/#2-using-let-arithmetic-operator-also-common","title":"\ud83d\udd27 2. Using <code>let</code> \u2014 Arithmetic Operator (Also Common)","text":"<p>The <code>let</code> command evaluates an arithmetic expression.</p> <pre><code>let x=5+3\necho \"x = $x\"\n</code></pre> <p>Or with variables:</p> <pre><code>a=8\nb=2\nlet result=a/b\necho \"Result: $result\"\n</code></pre>"},{"location":"lessons/03-control_flow/operations/#increment-and-decrement-with-let","title":"\ud83d\udd01 Increment and Decrement with <code>let</code>","text":"<pre><code>count=0\nlet count++\nlet count+=2\nlet count--\necho \"Count: $count\"\n</code></pre> <p>You can also use <code>++</code> and <code>--</code> with <code>$(( ))</code>, but not with <code>expr</code>.</p>"},{"location":"lessons/03-control_flow/operations/#3-using-expr-older-style-still-works","title":"\ud83e\uddfe 3. Using <code>expr</code> \u2014 Older Style (Still Works)","text":"<p>The <code>expr</code> command does math but requires spaces between every token.</p> <pre><code>result=$(expr 7 + 2)\necho \"Result: $result\"\n</code></pre>"},{"location":"lessons/03-control_flow/operations/#important","title":"\u26a0\ufe0f Important:","text":"<ul> <li>You must escape the <code>*</code> (multiplication) with <code>\\*</code> because <code>*</code> is a shell wildcard:</li> </ul> <pre><code>result=$(expr 6 \\* 3)\necho \"6 times 3 is $result\"\n</code></pre> <ul> <li>No support for <code>++</code>, <code>--</code>, or <code>+=</code> style operators.</li> </ul>"},{"location":"lessons/03-control_flow/operations/#limitation-no-floats","title":"\ud83d\udeab Limitation: No Floats!","text":"<p>Bash can\u2019t handle decimals:</p> <pre><code>a=5\nb=2\necho $((a / b))    # Output: 2, not 2.5\n</code></pre> <p>If you try:</p> <pre><code>echo $((5 / 2))     # \u2192 2\n</code></pre>"},{"location":"lessons/03-control_flow/operations/#workaround","title":"\ud83d\udca1 Workaround:","text":"<p>To use floating point math, use tools like:</p> <ul> <li><code>bc</code> (Basic Calculator):</li> </ul> <p><pre><code>echo \"scale=2; 5 / 2\" | bc   # Output: 2.50\n</code></pre> * <code>awk</code> for inline math:</p> <pre><code>echo | awk '{print 5/2}'     # Output: 2.5\n</code></pre>"},{"location":"lessons/03-control_flow/operations/#arithmetic-operators-summary","title":"\ud83d\udcc8 Arithmetic Operators Summary","text":"Operator Description Example <code>+</code> Addition <code>$((a + b))</code> <code>-</code> Subtraction <code>$((a - b))</code> <code>*</code> Multiplication <code>$((a * b))</code> <code>/</code> Division (int only) <code>$((a / b))</code> <code>%</code> Modulo <code>$((a % b))</code> <code>++</code> / <code>--</code> Increment / Decrement <code>$((a++))</code>, <code>let a--</code> <code>+=</code> / <code>-=</code> Compound assignment <code>let a+=2</code>"},{"location":"lessons/03-control_flow/operations/#examples-increment-and-decrement","title":"\ud83d\udd02 Examples: Increment and Decrement","text":"<pre><code>counter=0\necho \"Start: $counter\"\n\n((counter++))   # post-increment\necho \"After ++: $counter\"\n\n((counter--))   # post-decrement\necho \"After --: $counter\"\n\n((counter+=5))  # add 5\necho \"After +=5: $counter\"\n</code></pre>"},{"location":"lessons/03-control_flow/operations/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<ul> <li>Prefer <code>$(( ))</code> for arithmetic \u2014 modern and clean</li> <li>Use <code>let</code> for simple math or when incrementing directly</li> <li>Avoid <code>expr</code> unless required for legacy scripts</li> <li>Remember: Bash math is integer-only</li> <li>Use <code>bc</code> if you need decimal support</li> </ul>"},{"location":"lessons/03-control_flow/operations/#mini-script-example","title":"\ud83e\uddea Mini Script Example","text":""},{"location":"lessons/03-control_flow/operations/#binbash-read-p-enter-a-number-num-echo-square-num-num","title":"<pre><code>#!/bin/bash\n\nread -p \"Enter a number: \" num\necho \"Square: $((num * num))\"\n</code></pre>","text":""},{"location":"lessons/03-control_flow/user_input/","title":"\ud83e\uddfe Using the <code>read</code> Command to Capture User Input","text":""},{"location":"lessons/03-control_flow/user_input/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Use <code>read</code> to capture user input in Bash.</li> <li>Prompt users with <code>-p</code>.</li> <li>Set default values.</li> <li>Understand optional flags like <code>-s</code> (silent) and <code>-t</code> (timeout).</li> <li>Use input values dynamically in their scripts.</li> </ul>"},{"location":"lessons/03-control_flow/user_input/#what-is-the-read-command","title":"\ud83d\udc42 What Is the <code>read</code> Command?","text":"<p><code>read</code> is used in Bash to capture keyboard input from the user and store it in a variable.</p>"},{"location":"lessons/03-control_flow/user_input/#basic-syntax","title":"\ud83d\udd27 Basic Syntax","text":"<pre><code>read variable_name\n</code></pre>"},{"location":"lessons/03-control_flow/user_input/#example","title":"\ud83e\uddea Example:","text":"<pre><code>echo \"What is your name?\"\nread name\necho \"Hello, $name!\"\n</code></pre> <p>If the user types \u201cKorvo\u201d, the output will be:</p> <pre><code>Hello, Korvo!\n</code></pre>"},{"location":"lessons/03-control_flow/user_input/#prompting-the-user-with-p","title":"\ud83d\udce3 Prompting the User with <code>-p</code>","text":"<p>Use <code>-p</code> to show a message before input, all in one line:</p> <pre><code>read -p \"Enter your age: \" age\necho \"You are $age years old.\"\n</code></pre> <p>This is cleaner than using <code>echo</code> + <code>read</code> separately.</p>"},{"location":"lessons/03-control_flow/user_input/#setting-default-values-manually","title":"\ud83d\udd04 Setting Default Values (Manually)","text":"<p>Bash <code>read</code> doesn\u2019t support default values directly, but you can simulate it:</p> <pre><code>read -p \"Enter your country [Kenya]: \" country\ncountry=${country:-Kenya}\necho \"Country: $country\"\n</code></pre>"},{"location":"lessons/03-control_flow/user_input/#how-it-works","title":"\ud83d\udca1 How it works:","text":"<ul> <li>If the user just presses Enter (empty input), the default \u201cKenya\u201d is used.</li> </ul>"},{"location":"lessons/03-control_flow/user_input/#more-useful-read-flags","title":"\ud83d\udee0\ufe0f More Useful <code>read</code> Flags","text":"Flag Description Example <code>-p</code> Prompt before input <code>read -p \"Name: \" name</code> <code>-s</code> Silent mode (no echo) For passwords <code>-t</code> Timeout in seconds <code>read -t 5 name</code> <code>-n</code> Accept only N characters <code>read -n 1 choice</code>"},{"location":"lessons/03-control_flow/user_input/#example-with-s-silent-input","title":"\ud83d\udd10 Example with <code>-s</code> (Silent Input):","text":"<pre><code>read -sp \"Enter your password: \" password\necho -e \"\\nPassword received.\"\n</code></pre> <p><code>-s</code> is great for passwords \u2014 no input is shown while typing.</p>"},{"location":"lessons/03-control_flow/user_input/#example-with-t-timeout","title":"\u23f3 Example with <code>-t</code> (Timeout):","text":"<pre><code>read -t 5 -p \"Enter your username (5s timeout): \" username\nusername=${username:-\"anonymous\"}\necho \"Username: $username\"\n</code></pre> <p>If the user doesn\u2019t type anything within 5 seconds, the script proceeds.</p>"},{"location":"lessons/03-control_flow/user_input/#reading-multiple-values-at-once","title":"\ud83e\uddd1\u200d\ud83d\udcbb Reading Multiple Values at Once","text":"<pre><code>read -p \"Enter your first and last name: \" first last\necho \"First: $first, Last: $last\"\n</code></pre>"},{"location":"lessons/03-control_flow/user_input/#common-mistakes","title":"\u2757 Common Mistakes","text":"Mistake Why it's wrong Fix Forgetting quotes in prompts May cause unexpected formatting Always quote: <code>read -p \"Prompt: \" var</code> Expecting default values automatically <code>read</code> doesn\u2019t support this Use <code>${var:-default}</code> workaround No newline after <code>-s</code> Looks like it hangs Add <code>echo</code> or <code>-e \"\\n\"</code> after"},{"location":"lessons/03-control_flow/user_input/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Always quote your prompts: <code>read -p \"Enter something: \" var</code></li> <li>Use <code>-s</code> for passwords</li> <li>Use default fallback values with <code>${var:-default}</code></li> <li>Validate input if necessary (we\u2019ll cover that in a later lesson)</li> </ul>"},{"location":"lessons/03-control_flow/user_input/#summary-table","title":"\ud83d\udcc1 Summary Table","text":"Task Command Prompt user <code>read -p \"Enter your name: \" name</code> Silent input <code>read -sp \"Password: \" pass</code> Timeout input <code>read -t 5 name</code> Fallback value <code>var=${var:-Default}</code>"},{"location":"lessons/03-control_flow/user_input/#example-script-user-profile-prompt","title":"\ud83e\udde0 Example Script: User Profile Prompt","text":"<pre><code>#!/bin/bash\n\nread -p \"Name: \" name\nread -p \"Age: \" age\nread -sp \"Password: \" password\necho -e \"\\nWelcome, $name! You're $age years old.\"\n</code></pre>"},{"location":"lessons/03-control_flow/variables/","title":"\ud83d\udd24 Declaring and Using Variables in Bash","text":""},{"location":"lessons/03-control_flow/variables/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will be able to:</p> <ul> <li>Declare and assign values to variables in Bash.</li> <li>Understand naming rules and conventions.</li> <li>Use variables in scripts with <code>echo</code> and commands.</li> <li>Apply best practices to avoid common mistakes.</li> </ul>"},{"location":"lessons/03-control_flow/variables/#what-is-a-variable","title":"\ud83d\udce6 What Is a Variable?","text":"<p>A variable is a container for storing data \u2014 like text, numbers, or file paths \u2014 so you can reuse them later.</p> <p>In Bash, you don't need to declare the type (string, number, etc.). Everything is treated as text unless used in a math context.</p>"},{"location":"lessons/03-control_flow/variables/#declaring-a-variable","title":"\ud83d\udd27 Declaring a Variable","text":"<pre><code>name=\"Korvo\"\n</code></pre>"},{"location":"lessons/03-control_flow/variables/#syntax-breakdown","title":"\ud83e\udde0 Syntax Breakdown:","text":"<ul> <li>No spaces around the <code>=</code></li> <li>Use quotes (<code>\"</code>) for values with spaces</li> <li>Variable names are case-sensitive</li> </ul> <p>\u2705 Valid:</p> <pre><code>greeting=\"Hello\"\n</code></pre> <p>\u274c Invalid:</p> <pre><code>greeting = \"Hello\"   # \u274c SPACE will break it\n</code></pre>"},{"location":"lessons/03-control_flow/variables/#naming-rules-conventions","title":"\ud83d\udc68\u200d\ud83c\udfeb Naming Rules &amp; Conventions","text":"Rule Example Letters, numbers, and underscores only <code>my_name</code>, <code>age25</code> Must start with a letter or <code>_</code> \u2705 <code>_logPath</code>, \u274c <code>2cool</code> Avoid special characters \u274c <code>name!</code> Case-sensitive <code>USER</code> \u2260 <code>user</code>"},{"location":"lessons/03-control_flow/variables/#best-practice","title":"\u2705 Best Practice:","text":"<p>Use lowercase_with_underscores for your own variables to avoid conflict with system variables (like <code>$PATH</code>, <code>$HOME</code>).</p>"},{"location":"lessons/03-control_flow/variables/#using-a-variable","title":"\ud83d\udce3 Using a Variable","text":"<p>To use a variable, prefix it with <code>$</code>:</p> <pre><code>name=\"Korvo\"\necho \"Hello, $name!\"\n</code></pre> <p>Output:</p> <pre><code>Hello, Korvo!\n</code></pre>"},{"location":"lessons/03-control_flow/variables/#example-in-a-script","title":"\ud83e\uddea Example in a Script:","text":"<pre><code>#!/bin/bash\n\nfirst_name=\"Ada\"\nlast_name=\"Lovelace\"\n\necho \"Welcome, $first_name $last_name!\"\n</code></pre>"},{"location":"lessons/03-control_flow/variables/#quoting-variables","title":"\ud83e\uddfc Quoting Variables","text":"<p>Always wrap variables in double quotes when used with <code>echo</code>, filenames, or commands:</p> <pre><code>filename=\"my file.txt\"\necho \"$filename\"         # \u2705 Good\necho $filename           # \u26a0\ufe0f Risky: word splitting\n</code></pre>"},{"location":"lessons/03-control_flow/variables/#bonus-simple-math-with-variables","title":"\ud83e\uddee Bonus: Simple Math with Variables","text":"<p>Use <code>let</code>, <code>expr</code>, or <code>$(( ))</code> for arithmetic:</p> <pre><code>num1=5\nnum2=3\nsum=$((num1 + num2))\necho \"Sum: $sum\"\n</code></pre>"},{"location":"lessons/03-control_flow/variables/#updating-variables","title":"\ud83d\udd02 Updating Variables","text":"<p>You can reassign new values anytime:</p> <pre><code>status=\"pending\"\necho \"Status: $status\"\n\nstatus=\"complete\"\necho \"Updated Status: $status\"\n</code></pre> <p>Output:</p> <pre><code>Status: pending\nUpdated Status: complete\n</code></pre>"},{"location":"lessons/03-control_flow/variables/#common-mistakes","title":"\u274c Common Mistakes","text":"Mistake Why it's wrong Fix <code>name = \"Korvo\"</code> Spaces around <code>=</code> <code>name=\"Korvo\"</code> <code>echo $name</code> with unquoted spaces Breaks multi-word values Use <code>echo \"$name\"</code> Using undefined variables Expands to empty string Always assign before use"},{"location":"lessons/03-control_flow/variables/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Use clear, descriptive variable names.</li> <li>Always quote variables: <code>echo \"$var\"</code></li> <li>Avoid global naming conflicts (use lowercase).</li> <li>Don\u2019t put spaces around <code>=</code>.</li> <li>Use comments to explain what your variables do.</li> </ul>"},{"location":"lessons/03-control_flow/variables/#extra-exporting-variables","title":"\ud83e\udde0 Extra: Exporting Variables","text":"<p>To make a variable available to child processes, use <code>export</code>:</p> <pre><code>export PATH=\"$PATH:/new/path\"\n</code></pre> <p>This is useful for environment setup in <code>.bashrc</code> or <code>.profile</code>.</p>"},{"location":"lessons/03-control_flow/variables/#summary-table","title":"\ud83d\udcc1 Summary Table","text":"Task Example Declare a variable <code>username=\"korvo\"</code> Use a variable <code>echo \"$username\"</code> Reassign a variable <code>username=\"neo\"</code> Arithmetic <code>total=$((5 + 3))</code> Avoid spaces \u274c <code>var = 5</code>, \u2705 <code>var=5</code>"},{"location":"lessons/04-conditionalss/basic_comparisons/","title":"\u2696\ufe0f Comparing Numbers and Strings in Bash (<code>[ ]</code> vs <code>[[ ]]</code>)","text":""},{"location":"lessons/04-conditionalss/basic_comparisons/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Compare integers and strings using <code>[ ]</code> and <code>[[ ]]</code>.</li> <li>Understand the difference between string and numeric comparisons.</li> <li>Use operators like <code>-eq</code>, <code>-lt</code>, <code>=</code>, and <code>!=</code>.</li> <li>Follow quoting best practices to prevent bugs.</li> </ul>"},{"location":"lessons/04-conditionalss/basic_comparisons/#two-tools-for-conditions","title":"\ud83d\udd27 Two Tools for Conditions","text":"Method Description <code>[ ... ]</code> Traditional POSIX test command <code>[[ ... ]]</code> Bash-specific conditional expression (more flexible)"},{"location":"lessons/04-conditionalss/basic_comparisons/#1-numeric-comparisons","title":"\ud83d\udd22 1. Numeric Comparisons","text":"<p>Numeric comparisons only work for integers (whole numbers, no decimals).</p>"},{"location":"lessons/04-conditionalss/basic_comparisons/#syntax","title":"\u2705 Syntax:","text":"<pre><code>[ \"$a\" -eq \"$b\" ]     # Are a and b equal?\n</code></pre>"},{"location":"lessons/04-conditionalss/basic_comparisons/#common-operators","title":"\ud83d\udccc Common Operators:","text":"Operator Meaning Example <code>-eq</code> Equal <code>[ \"$a\" -eq \"$b\" ]</code> <code>-ne</code> Not equal <code>[ \"$a\" -ne \"$b\" ]</code> <code>-gt</code> Greater than <code>[ \"$a\" -gt \"$b\" ]</code> <code>-lt</code> Less than <code>[ \"$a\" -lt \"$b\" ]</code> <code>-ge</code> Greater or equal <code>[ \"$a\" -ge \"$b\" ]</code> <code>-le</code> Less or equal <code>[ \"$a\" -le \"$b\" ]</code>"},{"location":"lessons/04-conditionalss/basic_comparisons/#example","title":"\ud83e\uddea Example:","text":"<pre><code>a=5\nb=10\n\nif [ \"$a\" -lt \"$b\" ]; then\n  echo \"$a is less than $b\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/basic_comparisons/#2-string-comparisons","title":"\ud83d\udd24 2. String Comparisons","text":"<p>String comparisons compare text values.</p>"},{"location":"lessons/04-conditionalss/basic_comparisons/#operators","title":"\u2705 Operators:","text":"Operator Meaning Example <code>=</code> or <code>==</code> Strings are equal <code>[ \"$name\" = \"Alice\" ]</code> <code>!=</code> Strings are not equal <code>[ \"$name\" != \"Bob\" ]</code> <code>&lt;</code> String is less (ASCII) <code>[[ \"$a\" &lt; \"$b\" ]]</code> <code>&gt;</code> String is greater <code>[[ \"$a\" &gt; \"$b\" ]]</code> <code>-z</code> String is empty <code>[ -z \"$var\" ]</code> <code>-n</code> String is not empty <code>[ -n \"$var\" ]</code> <p>\u26a0\ufe0f <code>&lt;</code> and <code>&gt;</code> only work with <code>[[ ]]</code>, not <code>[ ]</code>.</p>"},{"location":"lessons/04-conditionalss/basic_comparisons/#example_1","title":"\ud83e\uddea Example:","text":"<pre><code>username=\"admin\"\n\nif [ \"$username\" = \"admin\" ]; then\n  echo \"Welcome, admin!\"\nelse\n  echo \"Access denied.\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/basic_comparisons/#3-quoting-best-practices","title":"\u2705 3. Quoting Best Practices","text":"<p>Always quote variables inside tests to avoid word splitting or errors when variables are empty.</p>"},{"location":"lessons/04-conditionalss/basic_comparisons/#good","title":"\u2705 Good:","text":"<pre><code>if [ \"$name\" = \"Alex\" ]; then\n</code></pre>"},{"location":"lessons/04-conditionalss/basic_comparisons/#risky","title":"\u274c Risky:","text":"<pre><code>if [ $name = Alex ]; then\n# Breaks if $name is empty \u2192 [ = Alex ] is invalid\n</code></pre>"},{"location":"lessons/04-conditionalss/basic_comparisons/#4-why-use","title":"\ud83e\udde0 4. Why Use <code>[[ ... ]]</code>?","text":"<p>The <code>[[ ... ]]</code> construct is:</p> <ul> <li>More robust: no need to escape <code>!</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&amp;&amp;</code>, etc.</li> <li>Safer with empty variables.</li> <li>Supports pattern matching (<code>== *.txt</code>)</li> </ul>"},{"location":"lessons/04-conditionalss/basic_comparisons/#example_2","title":"\ud83e\uddea Example:","text":"<pre><code>filename=\"report.txt\"\n\nif [[ \"$filename\" == *.txt ]]; then\n  echo \"Text file detected.\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/basic_comparisons/#quick-comparison-table","title":"\ud83e\uddfe Quick Comparison Table","text":"Feature <code>[ ]</code> <code>[[ ]]</code> POSIX-compatible \u2705 Yes \u274c No (Bash-only) Safer for string comparisons \u274c No \u2705 Yes Supports <code>&lt;</code> and <code>&gt;</code> \u274c No \u2705 Yes Allows regex/pattern matching \u274c No \u2705 Yes Fails on empty variables \u274c Yes \u2705 No (usually safe)"},{"location":"lessons/04-conditionalss/basic_comparisons/#common-mistakes","title":"\ud83d\udeab Common Mistakes","text":"Mistake Problem Fix <code>[ $num -gt 5 ]</code> Breaks if <code>$num</code> is empty Quote it: <code>[ \"$num\" -gt 5 ]</code> <code>[ \"$a\" &gt; \"$b\" ]</code> Lexical string comparison not allowed Use <code>[[ \"$a\" &gt; \"$b\" ]]</code> Forgetting <code>fi</code> Block won\u2019t close Always end <code>if</code> with <code>fi</code>"},{"location":"lessons/04-conditionalss/basic_comparisons/#example-script","title":"\ud83d\udd02 Example Script","text":"<pre><code>#!/bin/bash\n\nread -p \"Enter a number: \" num\n\nif [ \"$num\" -eq 42 ]; then\n  echo \"You found the meaning of life!\"\nelif [ \"$num\" -lt 10 ]; then\n  echo \"Too small!\"\nelse\n  echo \"Just a number.\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/case_statements/","title":"\ud83c\udf9b\ufe0f The <code>case</code> Statement in Bash","text":""},{"location":"lessons/04-conditionalss/case_statements/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Understand how the <code>case</code> statement works in Bash.</li> <li>Use it to handle multiple known values efficiently.</li> <li>Write cleaner scripts for menus, user input, and argument parsing.</li> <li>Compare <code>case</code> with <code>if</code>/<code>elif</code> for better code design.</li> </ul>"},{"location":"lessons/04-conditionalss/case_statements/#what-is-case","title":"\ud83d\udd04 What Is <code>case</code>?","text":"<p>The <code>case</code> statement allows you to test one variable against multiple patterns, and execute different code depending on the match.</p> <p>It\u2019s like a switch-case in other languages like C, Java, or JavaScript.</p>"},{"location":"lessons/04-conditionalss/case_statements/#syntax","title":"\ud83d\udd27 Syntax","text":"<pre><code>case \"$variable\" in\n  pattern1)\n    # commands\n    ;;\n  pattern2)\n    # other commands\n    ;;\n  *)\n    # default case\n    ;;\nesac\n</code></pre> <p>\ud83e\udde0 <code>esac</code> = <code>case</code> spelled backwards (like <code>fi</code> for <code>if</code>)</p>"},{"location":"lessons/04-conditionalss/case_statements/#example-simple-menu","title":"\ud83e\uddea Example: Simple Menu","text":"<pre><code>#!/bin/bash\n\necho \"Choose an option:\"\necho \"1) Say hello\"\necho \"2) Show date\"\necho \"3) Exit\"\n\nread -p \"Enter choice: \" choice\n\ncase \"$choice\" in\n  1)\n    echo \"Hello there!\"\n    ;;\n  2)\n    date\n    ;;\n  3)\n    echo \"Goodbye!\"\n    ;;\n  *)\n    echo \"Invalid option\"\n    ;;\nesac\n</code></pre>"},{"location":"lessons/04-conditionalss/case_statements/#why-use-case-instead-of-multiple-ifs","title":"\u2705 Why Use <code>case</code> Instead of Multiple <code>if</code>s?","text":""},{"location":"lessons/04-conditionalss/case_statements/#if-version-long-and-harder-to-read","title":"<code>if</code> Version (long and harder to read):","text":"<pre><code>if [ \"$input\" = \"start\" ]; then\n  echo \"Starting...\"\nelif [ \"$input\" = \"stop\" ]; then\n  echo \"Stopping...\"\nelif [ \"$input\" = \"restart\" ]; then\n  echo \"Restarting...\"\nelse\n  echo \"Unknown command.\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/case_statements/#case-version-cleaner","title":"<code>case</code> Version (cleaner):","text":"<pre><code>case \"$input\" in\n  start)\n    echo \"Starting...\"\n    ;;\n  stop)\n    echo \"Stopping...\"\n    ;;\n  restart)\n    echo \"Restarting...\"\n    ;;\n  *)\n    echo \"Unknown command.\"\n    ;;\nesac\n</code></pre> <ul> <li>\u2705 Easier to maintain</li> <li>\u2705 Scales better as options increase</li> <li>\u2705 Cleaner with pattern matching</li> </ul>"},{"location":"lessons/04-conditionalss/case_statements/#wildcards-and-pattern-matching","title":"\ud83e\udded Wildcards and Pattern Matching","text":"<p>You can use wildcards like <code>*</code>, <code>?</code>, <code>[...]</code> in patterns.</p>"},{"location":"lessons/04-conditionalss/case_statements/#example","title":"Example:","text":"<pre><code>case \"$file\" in\n  *.txt)\n    echo \"Text file\"\n    ;;\n  *.jpg|*.png)\n    echo \"Image file\"\n    ;;\n  *)\n    echo \"Unknown file type\"\n    ;;\nesac\n</code></pre>"},{"location":"lessons/04-conditionalss/case_statements/#real-world-example-argument-parsing","title":"\ud83e\uddf0 Real-World Example: Argument Parsing","text":"<pre><code>#!/bin/bash\n\ncase \"$1\" in\n  start)\n    echo \"Starting service...\"\n    ;;\n  stop)\n    echo \"Stopping service...\"\n    ;;\n  status)\n    echo \"Service is running.\"\n    ;;\n  *)\n    echo \"Usage: $0 {start|stop|status}\"\n    ;;\nesac\n</code></pre> <p>Run it from terminal:</p> <pre><code>./service.sh start\n./service.sh status\n./service.sh foo\n</code></pre>"},{"location":"lessons/04-conditionalss/case_statements/#another-example-day-of-the-week","title":"\ud83d\udd02 Another Example: Day of the Week","text":"<pre><code>read -p \"What day is it? \" day\n\ncase \"$day\" in\n  Monday|monday)\n    echo \"Ugh, Monday blues.\"\n    ;;\n  Friday|friday)\n    echo \"TGIF!\"\n    ;;\n  Saturday|Sunday|saturday|sunday)\n    echo \"Weekend fun time!\"\n    ;;\n  *)\n    echo \"Just another day.\"\n    ;;\nesac\n</code></pre>"},{"location":"lessons/04-conditionalss/case_statements/#common-mistakes","title":"\u26a0\ufe0f Common Mistakes","text":"Mistake What Happens Fix Missing <code>;;</code> Falls through to next case Always end each block with <code>;;</code> Forgetting <code>esac</code> Script crashes Always close with <code>esac</code> Using <code>if</code> when <code>case</code> is better Messy and hard to read Prefer <code>case</code> for menus and fixed options"},{"location":"lessons/04-conditionalss/case_statements/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Feature <code>if</code> <code>case</code> Test logic expressions \u2705 Yes \u274c No Match fixed strings \u2705 Yes \u2705 Yes Pattern matching \u274c No \u2705 Yes Best for menus &amp; input \u274c Okay \u2705 Ideal Scales well \u274c No \u2705 Yes"},{"location":"lessons/04-conditionalss/case_statements/#final-tip","title":"\ud83d\udccc Final Tip","text":"<p>Use <code>case</code> when:</p> <ul> <li>You expect fixed string input</li> <li>You're building menus or CLIs</li> <li>You want cleaner logic</li> </ul>"},{"location":"lessons/04-conditionalss/nested_conditionals/","title":"Nested <code>if</code> Statements in Bash","text":""},{"location":"lessons/04-conditionalss/nested_conditionals/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Understand how to nest <code>if</code> statements inside one another.</li> <li>Use proper indentation and formatting to keep code readable.</li> <li>Write scripts that handle complex, multi-layered conditions.</li> </ul>"},{"location":"lessons/04-conditionalss/nested_conditionals/#what-is-nesting","title":"\ud83d\udd04 What Is Nesting?","text":"<p>Nesting means putting one <code>if</code> statement inside another.</p> <p>This lets you check a second condition only if the first one passes.</p>"},{"location":"lessons/04-conditionalss/nested_conditionals/#basic-syntax-of-nested-if","title":"\ud83d\udd27 Basic Syntax of Nested <code>if</code>","text":"<pre><code>if [ first_condition ]; then\n  if [ second_condition ]; then\n    # Do this if both conditions are true\n  else\n    # Do this if only the first condition is true\n  fi\nelse\n  # Do this if the first condition is false\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/nested_conditionals/#example-file-and-content-check","title":"\ud83e\uddea Example: File and Content Check","text":"<p>Check if a file exists, and if it does, whether it\u2019s empty or not:</p> <pre><code>#!/bin/bash\n\nread -p \"Enter filename: \" file\n\nif [ -e \"$file\" ]; then\n  echo \"File exists.\"\n\n  if [ -s \"$file\" ]; then\n    echo \"File is not empty.\"\n  else\n    echo \"File is empty.\"\n  fi\n\nelse\n  echo \"File does not exist.\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/nested_conditionals/#explanation","title":"\ud83d\udccc Explanation","text":"<ul> <li>First <code>if</code>: Does the file exist?</li> <li>Nested <code>if</code>: Is the file size &gt; 0?</li> </ul>"},{"location":"lessons/04-conditionalss/nested_conditionals/#indentation-and-formatting-tips","title":"\u2705 Indentation and Formatting Tips","text":"Rule Why Use 2 spaces per level Keeps code readable Line up <code>fi</code> with its matching <code>if</code> Easier to debug Add comments in complex logic Avoid confusion later Don't over-nest if avoidable Use <code>elif</code> or case when better"},{"location":"lessons/04-conditionalss/nested_conditionals/#alternative-use-logical-operators-instead-of-nesting","title":"\ud83e\udde0 Alternative: Use Logical Operators Instead of Nesting","text":"<p>Instead of nesting:</p> <pre><code>if [ -e \"$file\" ]; then\n  if [ -s \"$file\" ]; then\n    echo \"OK\"\n  fi\nfi\n</code></pre> <p>You can write:</p> <pre><code>if [ -e \"$file\" ] &amp;&amp; [ -s \"$file\" ]; then\n  echo \"OK\"\nfi\n</code></pre> <ul> <li>\u2705 Shorter</li> <li>\u2705 Still readable (as long as logic is simple)</li> </ul>"},{"location":"lessons/04-conditionalss/nested_conditionals/#real-life-example-login-access-control","title":"\ud83e\uddea Real-Life Example: Login Access Control","text":"<pre><code>#!/bin/bash\n\nread -p \"Enter your username: \" user\nread -p \"Enter access level (1-5): \" level\n\nif [[ \"$user\" == \"admin\" ]]; then\n  echo \"Admin detected.\"\n\n  if [ \"$level\" -ge 4 ]; then\n    echo \"Full access granted.\"\n  else\n    echo \"Restricted admin access.\"\n  fi\n\nelse\n  echo \"Standard user.\"\n  if [ \"$level\" -ge 3 ]; then\n    echo \"Elevated access.\"\n  else\n    echo \"Basic access.\"\n  fi\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/nested_conditionals/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"Mistake Problem Fix Missing <code>fi</code> Breaks script Always close each <code>if</code> Poor indentation Hard to read Use consistent spacing Over-nesting Confusing logic Consider <code>elif</code> or <code>case</code>"},{"location":"lessons/04-conditionalss/nested_conditionals/#summary","title":"\ud83e\udde0 Summary","text":"<ul> <li>\u2705 Use nested <code>if</code> statements to handle dependent conditions</li> <li>\u2705 Keep your code clean with indentation and commenting</li> <li>\u2705 Consider alternatives (<code>&amp;&amp;</code>, <code>elif</code>, <code>case</code>) when nesting gets deep</li> </ul>"},{"location":"lessons/04-conditionalss/what_are_conditionals/","title":"\ud83d\udd0d Conditionals in Bash (<code>if</code>, <code>then</code>, <code>else</code>, <code>fi</code>)","text":""},{"location":"lessons/04-conditionalss/what_are_conditionals/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Understand how <code>if</code> conditionals work in Bash.</li> <li>Use <code>then</code>, <code>else</code>, <code>elif</code>, and <code>fi</code> properly.</li> <li>Check conditions using <code>[ ]</code> and <code>[[ ]]</code>.</li> <li>Write clean, readable condition blocks with good indentation.</li> <li>Use conditionals in real-world scripts (e.g. check if a file exists).</li> </ul>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#what-are-conditionals","title":"\ud83d\udd01 What Are Conditionals?","text":"<p>Conditionals let your script make decisions.</p> <p>\u201cIf something is true, do this. Otherwise, do that.\u201d</p> <p>Bash uses <code>if</code>, <code>then</code>, <code>else</code>, and <code>fi</code> (which ends the block).</p>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#basic-syntax","title":"\ud83d\udd27 Basic Syntax","text":"<pre><code>if [ condition ]\nthen\n    # code to run if condition is true\nelse\n    # code to run if condition is false\nfi\n</code></pre> <p>Or written more compactly:</p> <pre><code>if [ condition ]; then\n    # do something\nelse\n    # do something else\nfi\n</code></pre> <p>\u2705 <code>fi</code> = end of <code>if</code> block (it\u2019s \u201cif\u201d spelled backwards)</p>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#example-check-a-number","title":"\ud83e\uddea Example: Check a Number","text":"<pre><code>read -p \"Enter a number: \" num\n\nif [ \"$num\" -gt 10 ]; then\n    echo \"That's a big number!\"\nelse\n    echo \"That's a small number.\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#condition-operators","title":"\u2705 Condition Operators","text":"Test Description Example <code>-eq</code> Equal <code>[ \"$a\" -eq \"$b\" ]</code> <code>-ne</code> Not equal <code>[ \"$a\" -ne \"$b\" ]</code> <code>-gt</code> Greater than <code>[ \"$a\" -gt \"$b\" ]</code> <code>-lt</code> Less than <code>[ \"$a\" -lt \"$b\" ]</code> <code>-ge</code> Greater or equal <code>[ \"$a\" -ge \"$b\" ]</code> <code>-le</code> Less or equal <code>[ \"$a\" -le \"$b\" ]</code> <code>=</code> String equals <code>[ \"$name\" = \"Alex\" ]</code> <code>!=</code> String not equals <code>[ \"$name\" != \"Alex\" ]</code>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#real-world-example-check-if-file-exists","title":"\ud83d\udcc1 Real-World Example: Check if File Exists","text":"<pre><code>read -p \"Enter a filename: \" file\n\nif [ -f \"$file\" ]; then\n    echo \"\u2705 File '$file' exists.\"\nelse\n    echo \"\u274c File '$file' does not exist.\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#file-test-flags","title":"\ud83d\udd0d File Test Flags","text":"Flag Meaning <code>-f</code> Is a regular file <code>-d</code> Is a directory <code>-e</code> File or directory exists <code>-s</code> File exists and is not empty <code>-r</code> Is readable <code>-w</code> Is writable <code>-x</code> Is executable"},{"location":"lessons/04-conditionalss/what_are_conditionals/#using-elif-for-multiple-conditions","title":"\ud83e\udde0 Using <code>elif</code> for Multiple Conditions","text":"<pre><code>read -p \"Enter your score (0-100): \" score\n\nif [ \"$score\" -ge 90 ]; then\n    echo \"Grade: A\"\nelif [ \"$score\" -ge 80 ]; then\n    echo \"Grade: B\"\nelif [ \"$score\" -ge 70 ]; then\n    echo \"Grade: C\"\nelse\n    echo \"Grade: F\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#indentation-formatting-tips","title":"\ud83e\uddfc Indentation &amp; Formatting Tips","text":"<p>\u2705 Best Practice:</p> <ul> <li>Indent the code inside each block with 2 spaces</li> <li>Keep <code>then</code>, <code>else</code>, and <code>fi</code> aligned vertically</li> </ul> <pre><code>if [ \"$name\" = \"admin\" ]; then\n  echo \"Welcome, admin.\"\nelse\n  echo \"Access denied.\"\nfi\n</code></pre>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#tip-use-quotes-around-variables","title":"\ud83d\udcac Tip: Use Quotes Around Variables","text":"<p>Always quote variables in conditionals to avoid errors when they\u2019re empty:</p> <pre><code>if [ \"$name\" = \"Alex\" ]; then\n</code></pre> <p>Not this:</p> <pre><code>if [ $name = Alex ]; then  # \u274c breaks if $name is empty\n</code></pre>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#use-vs","title":"\ud83d\udccc Use <code>[ ]</code> vs <code>[[ ]]</code>","text":"<ul> <li><code>[ ]</code> = traditional test command</li> <li><code>[[ ]]</code> = newer, more powerful (supports pattern matching, safer spacing)</li> </ul> <pre><code>if [[ \"$file\" == *.txt ]]; then\n  echo \"Text file detected!\"\nfi\n</code></pre> <p>\ud83d\udca1 Prefer <code>[[ ]]</code> in modern Bash scripts if available.</p>"},{"location":"lessons/04-conditionalss/what_are_conditionals/#common-errors","title":"\ud83d\udeab Common Errors","text":"Mistake Problem Fix <code>if [ $var = \"test\" ]</code> Breaks if <code>$var</code> is empty Use <code>\"$var\"</code> Missing <code>fi</code> Unexpected end of file Always close with <code>fi</code> <code>if[ ... ]</code> No space after <code>if</code> Add space: <code>if [ ... ]</code> <code>if [ \"$a\" &gt; \"$b\" ]</code> Wrong for numbers Use <code>-gt</code> instead"},{"location":"lessons/04-conditionalss/what_are_conditionals/#summary-table","title":"\ud83d\udcc1 Summary Table","text":"Block Keyword Start condition <code>if</code> Do something <code>then</code> Optional alternate path <code>else</code>, <code>elif</code> End block <code>fi</code>"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/","title":"\ud83e\udde0 Using <code>break</code> and <code>continue</code> in Bash Loops","text":""},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#overview","title":"\ud83d\udd0d Overview","text":"Command What it does <code>break</code> Immediately exits the entire loop <code>continue</code> Skips the current iteration, moves to the next one"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#syntax","title":"\ud83d\udccc Syntax","text":"<p>Both are used inside loops:</p> <pre><code>for item in list\ndo\n  if [ condition ]; then\n    break      # or continue\n  fi\ndone\n</code></pre> <p>Also works with <code>while</code> and <code>until</code>.</p>"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#example-1-break-exit-loop-early","title":"\ud83e\uddea Example 1: <code>break</code> \u2014 Exit Loop Early","text":"<pre><code>for num in {1..10}\ndo\n  echo \"Checking $num\"\n  if [ \"$num\" -eq 5 ]; then\n    echo \"Found 5! Stopping the loop.\"\n    break\n  fi\ndone\n</code></pre> <p>Output:</p> <pre><code>Checking 1\nChecking 2\n...\nFound 5! Stopping the loop.\n</code></pre> <p>\u2705 Use <code>break</code> when something is found or a condition is met and you want to stop immediately.</p>"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#example-2-continue-skip-certain-iterations","title":"\ud83e\uddea Example 2: <code>continue</code> \u2014 Skip Certain Iterations","text":"<pre><code>for file in *.txt\ndo\n  if [[ \"$file\" == \"secret.txt\" ]]; then\n    echo \"Skipping secret file...\"\n    continue\n  fi\n  echo \"Processing $file\"\ndone\n</code></pre> <p>\u2705 Use <code>continue</code> when you want to skip over specific values (e.g., ignore temp files, skip malformed lines, etc.)</p>"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#real-life-example-filter-and-stop","title":"\ud83d\udd02 Real-Life Example: Filter and Stop","text":"<pre><code>count=0\n\nfor file in *.log\ndo\n  if [[ \"$file\" == *error* ]]; then\n    echo \"Skipping error log: $file\"\n    continue\n  fi\n\n  echo \"Archiving $file\"\n  ((count++))\n\n  if [ $count -ge 3 ]; then\n    echo \"Archived 3 files. Done!\"\n    break\n  fi\ndone\n</code></pre>"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#what-it-does","title":"\u2705 What it does:","text":"<ul> <li>Skips files with \u201cerror\u201d in the name.</li> <li>Processes only 3 files, then stops.</li> </ul>"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#also-works-with-while-loops","title":"\ud83d\udd01 Also Works with <code>while</code> Loops","text":"<pre><code>num=0\n\nwhile [ $num -lt 10 ]\ndo\n  ((num++))\n\n  if [ $((num % 2)) -eq 0 ]; then\n    continue  # skip even numbers\n  fi\n\n  echo \"Odd number: $num\"\n\n  if [ \"$num\" -eq 7 ]; then\n    echo \"Stopping at lucky 7!\"\n    break\n  fi\ndone\n</code></pre> <p>\u2705 This prints odd numbers until 7, then stops.</p>"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#best-practices","title":"\u26a0\ufe0f Best Practices","text":"Practice Why it matters Avoid deep nesting with <code>break</code> Use it early to reduce complexity Comment your <code>continue</code>/<code>break</code> Explain why you're skipping/exiting Use <code>break</code> for success/failure exits e.g., found item, max attempts"},{"location":"lessons/05-loops_and_iteration/breaking_and_continuing/#summary-table","title":"\ud83d\udcda Summary Table","text":"Statement Effect Use Case <code>break</code> Stops the loop entirely Found what you were looking for <code>continue</code> Skips the current loop and goes to next Skip unwanted items (e.g., temp files)"},{"location":"lessons/05-loops_and_iteration/for_loops/","title":"\ud83d\udd01 <code>for</code> Loops in Bash","text":""},{"location":"lessons/05-loops_and_iteration/for_loops/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Write <code>for</code> loops using both numeric ranges and list-style iteration.</li> <li>Understand the <code>in</code> keyword, loop variables, and proper syntax.</li> <li>Use loops to process files, lines, and command output.</li> <li>Learn formatting and best practices for readable loops.</li> </ul>"},{"location":"lessons/05-loops_and_iteration/for_loops/#basic-syntax","title":"\ud83d\udd27 Basic Syntax","text":"<pre><code>for variable in list\ndo\n  # commands\ndone\n</code></pre> <ul> <li><code>variable</code>: A placeholder that changes on each loop</li> <li><code>list</code>: A space-separated list of values</li> </ul>"},{"location":"lessons/05-loops_and_iteration/for_loops/#1-list-style-iteration","title":"\ud83d\udccb 1. List-Style Iteration","text":"<p>Looping over a set of strings or items.</p>"},{"location":"lessons/05-loops_and_iteration/for_loops/#example-loop-through-words","title":"\ud83e\uddea Example: Loop Through Words","text":"<pre><code>for name in Alice Bob Charlie\ndo\n  echo \"Hello, $name!\"\ndone\n</code></pre> <p>Output:</p> <pre><code>Hello, Alice!\nHello, Bob!\nHello, Charlie!\n</code></pre> <p>\u2705 Use this for looping through known values.</p>"},{"location":"lessons/05-loops_and_iteration/for_loops/#2-numeric-ranges-with","title":"\ud83d\udd22 2. Numeric Ranges with <code>{}</code>","text":"<pre><code>for i in {1..5}\ndo\n  echo \"Number: $i\"\ndone\n</code></pre> <p>Output:</p> <pre><code>Number: 1\nNumber: 2\n...\nNumber: 5\n</code></pre> <p>You can also set step values:</p> <pre><code>for i in {0..10..2}; do echo \"$i\"; done\n</code></pre>"},{"location":"lessons/05-loops_and_iteration/for_loops/#3-c-style-for-loop-like-in-cjava","title":"\ud83d\udd01 3. C-Style <code>for</code> Loop (like in C/Java)","text":"<pre><code>for ((i=1; i&lt;=5; i++))\ndo\n  echo \"Count: $i\"\ndone\n</code></pre> <p>\u2705 Useful when you need more control (e.g., incrementing with different step sizes or using math inside the loop)</p>"},{"location":"lessons/05-loops_and_iteration/for_loops/#4-looping-through-files","title":"\ud83d\udcc1 4. Looping Through Files","text":"<pre><code>for file in *.txt\ndo\n  echo \"Found text file: $file\"\ndone\n</code></pre> <p>\u2705 This is super useful for automation scripts like backups, renaming files, or parsing data.</p>"},{"location":"lessons/05-loops_and_iteration/for_loops/#5-loop-through-command-output","title":"\ud83d\udd02 5. Loop Through Command Output","text":"<p>Use command substitution <code>$()</code>:</p> <pre><code>for user in $(cut -d: -f1 /etc/passwd)\ndo\n  echo \"System user: $user\"\ndone\n</code></pre> <p>\u26a0\ufe0f This works best when the output has no spaces. For outputs with spaces or newlines, use a <code>while</code> loop instead (we\u2019ll cover that soon).</p>"},{"location":"lessons/05-loops_and_iteration/for_loops/#real-world-example-renaming-files","title":"\ud83e\udde0 Real-World Example: Renaming Files","text":"<pre><code>count=1\nfor file in *.jpg\ndo\n  mv \"$file\" \"image_$count.jpg\"\n  ((count++))\ndone\n</code></pre> <p>Renames:</p> <pre><code>photo1.jpg \u2192 image_1.jpg\nphoto2.jpg \u2192 image_2.jpg\n</code></pre>"},{"location":"lessons/05-loops_and_iteration/for_loops/#formatting-and-indentation-tips","title":"\ud83e\uddfc Formatting and Indentation Tips","text":"<ul> <li>Use 2 spaces or tabs consistently</li> <li>Avoid cramming logic in a single line for readability (unless it's very short)</li> <li>Use <code>{}</code> or <code>\"\"</code> around variables when in doubt (especially for filenames)</li> </ul>"},{"location":"lessons/05-loops_and_iteration/for_loops/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"Mistake Problem Fix No <code>do</code> keyword Syntax error Always start loop body with <code>do</code> Forgetting <code>done</code> Script crashes Every loop must end with <code>done</code> Quoting filenames improperly Breaks with spaces Use <code>\"$file\"</code> instead of <code>$file</code> Looping over command output with spaces Breaks items Use <code>IFS</code> or a <code>while</code> loop instead"},{"location":"lessons/05-loops_and_iteration/for_loops/#summary-table","title":"\ud83d\udcda Summary Table","text":"Type Syntax Use Case List-style <code>for x in a b c</code> Loop over known values Range <code>for x in {1..5}</code> Loop over numbers C-style <code>for ((i=1;i&lt;=5;i++))</code> More control with math Files <code>for f in *.txt</code> Batch file processing Commands <code>for x in $(command)</code> Process output safely"},{"location":"lessons/05-loops_and_iteration/until_loops/","title":"\ud83d\udd01 <code>until</code> Loops in Bash","text":""},{"location":"lessons/05-loops_and_iteration/until_loops/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Understand how <code>until</code> loops work and how they differ from <code>while</code> loops.</li> <li>Use <code>until</code> for retrying tasks or waiting for conditions.</li> <li>Write practical scripts using countdowns, retries, and waits.</li> </ul>"},{"location":"lessons/05-loops_and_iteration/until_loops/#how-until-differs-from-while","title":"\ud83d\udd0d How <code>until</code> Differs from <code>while</code>","text":"Loop Type Runs when... <code>while</code> condition is true <code>until</code> condition is false <p>So:</p> <pre><code>while [ condition ]; do ... done   # Runs while true\nuntil [ condition ]; do ... done   # Runs while false\n</code></pre>"},{"location":"lessons/05-loops_and_iteration/until_loops/#basic-syntax","title":"\ud83d\udd27 Basic Syntax","text":"<pre><code>until [ condition ]\ndo\n  # commands\ndone\n</code></pre> <p>It keeps looping until the condition becomes true (i.e., it's the opposite logic of <code>while</code>).</p>"},{"location":"lessons/05-loops_and_iteration/until_loops/#example-1-countdown-with-until","title":"\u23f1\ufe0f Example 1: Countdown with <code>until</code>","text":"<pre><code>count=5\n\nuntil [ $count -le 0 ]\ndo\n  echo \"Countdown: $count\"\n  ((count--))\ndone\n</code></pre> <p>Output:</p> <pre><code>Countdown: 5\nCountdown: 4\n...\n</code></pre> <p>\u2705 It stops once <code>$count</code> is no longer greater than 0.</p>"},{"location":"lessons/05-loops_and_iteration/until_loops/#example-2-retry-until-file-exists","title":"\ud83d\udd01 Example 2: Retry Until File Exists","text":"<pre><code>filename=\"data.txt\"\n\nuntil [ -f \"$filename\" ]\ndo\n  echo \"Waiting for $filename to be created...\"\n  sleep 2\ndone\n\necho \"File found!\"\n</code></pre> <p>\u2705 Useful for scripts that wait for a file to appear, like logs or outputs from another job.</p>"},{"location":"lessons/05-loops_and_iteration/until_loops/#example-3-ask-for-input-until-correct","title":"\ud83d\udd10 Example 3: Ask for Input Until Correct","text":"<pre><code>input=\"\"\n\nuntil [ \"$input\" = \"yes\" ]\ndo\n  read -p \"Do you agree? Type 'yes' to continue: \" input\ndone\n\necho \"Thank you!\"\n</code></pre> <p>\u2705 This repeats until the user types <code>\"yes\"</code>.</p>"},{"location":"lessons/05-loops_and_iteration/until_loops/#infinite-loop-with-break-optional","title":"\ud83d\udd04 Infinite Loop with Break (Optional)","text":"<p>Sometimes you don\u2019t have a clear end condition. You can use <code>until true</code> or <code>until false</code> and break manually:</p> <pre><code>attempts=0\n\nuntil false\ndo\n  read -p \"Enter the secret word: \" word\n  ((attempts++))\n\n  if [ \"$word\" = \"banana\" ]; then\n    echo \"Correct!\"\n    break\n  elif [ $attempts -ge 3 ]; then\n    echo \"Too many tries!\"\n    break\n  fi\ndone\n</code></pre>"},{"location":"lessons/05-loops_and_iteration/until_loops/#when-to-use-until","title":"\ud83e\udde0 When to Use <code>until</code>","text":"<ul> <li>\u2705 When you're waiting for something to happen</li> <li>\u2705 When a task should retry until it succeeds</li> <li>\u2705 When the failure case is the starting state (e.g. file not present, connection not established)</li> </ul> <p>If your condition starts out as \"bad\" and becomes \"good\", use <code>until</code>. If it starts out \"good\" and becomes \"bad\", use <code>while</code>.</p>"},{"location":"lessons/05-loops_and_iteration/until_loops/#summary-table","title":"\ud83d\udccc Summary Table","text":"Feature <code>while</code> <code>until</code> Runs when... condition is true condition is false Stops when... condition becomes false condition becomes true Use when... You know the success state early You're waiting for success later"},{"location":"lessons/05-loops_and_iteration/while_loops/","title":"\ud83d\udd01 <code>while</code> Loops in Bash","text":""},{"location":"lessons/05-loops_and_iteration/while_loops/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Understand how <code>while</code> loops work in Bash.</li> <li>Use <code>while</code> to repeat commands until a condition is false.</li> <li>Create interactive loops (e.g., reading input).</li> <li>Understand infinite loops and how to safely break out of them.</li> </ul>"},{"location":"lessons/05-loops_and_iteration/while_loops/#basic-syntax","title":"\ud83d\udd27 Basic Syntax","text":"<pre><code>while [ condition ]\ndo\n  # commands\ndone\n</code></pre> <p>The loop runs as long as the condition is true.</p>"},{"location":"lessons/05-loops_and_iteration/while_loops/#example-1-counting-with-a-while-loop","title":"\ud83e\uddea Example 1: Counting with a <code>while</code> Loop","text":"<pre><code>count=1\n\nwhile [ $count -le 5 ]\ndo\n  echo \"Count is $count\"\n  ((count++))\ndone\n</code></pre> <p>Output:</p> <pre><code>Count is 1\nCount is 2\n...\nCount is 5\n</code></pre> <p>\u2705 Great for loops where the condition isn\u2019t tied to a list.</p>"},{"location":"lessons/05-loops_and_iteration/while_loops/#example-2-read-user-input-until-quit","title":"\ud83d\udcac Example 2: Read User Input Until \u201cquit\u201d","text":"<pre><code>input=\"\"\n\nwhile [ \"$input\" != \"quit\" ]\ndo\n  read -p \"Type something (type 'quit' to exit): \" input\n  echo \"You typed: $input\"\ndone\n</code></pre> <p>\u2705 This loop keeps asking until the user types <code>quit</code>.</p>"},{"location":"lessons/05-loops_and_iteration/while_loops/#example-3-read-from-a-file-line-by-line","title":"\ud83d\udce5 Example 3: Read from a File Line by Line","text":"<pre><code>while read -r line\ndo\n  echo \"Line: $line\"\ndone &lt; myfile.txt\n</code></pre> <p>\u2705 Useful for processing files without loading them fully into memory.</p>"},{"location":"lessons/05-loops_and_iteration/while_loops/#infinite-loops","title":"\u267e\ufe0f Infinite Loops","text":"<p>Sometimes, you want a loop to run forever \u2014 until something inside breaks it.</p>"},{"location":"lessons/05-loops_and_iteration/while_loops/#syntax","title":"Syntax:","text":"<pre><code>while true\ndo\n  # do something forever\ndone\n</code></pre> <p>Or:</p> <pre><code>while :\ndo\n  # same thing \u2014 colon is a no-op (always true)\ndone\n</code></pre>"},{"location":"lessons/05-loops_and_iteration/while_loops/#breaking-out-of-loops","title":"\ud83d\uded1 Breaking Out of Loops","text":"<p>Use <code>break</code> to exit a loop early.</p>"},{"location":"lessons/05-loops_and_iteration/while_loops/#example-loop-with-exit-condition","title":"\ud83e\uddea Example: Loop with Exit Condition","text":"<pre><code>while true\ndo\n  read -p \"Enter password (or 'exit' to quit): \" pass\n\n  if [ \"$pass\" = \"secret\" ]; then\n    echo \"Access granted.\"\n    break\n  elif [ \"$pass\" = \"exit\" ]; then\n    echo \"Goodbye!\"\n    break\n  else\n    echo \"Wrong password.\"\n  fi\ndone\n</code></pre> <p>\u2705 Breaks the loop only when the user gets it right or types <code>exit</code>.</p>"},{"location":"lessons/05-loops_and_iteration/while_loops/#safety-tips-for-while-loops","title":"\u26a0\ufe0f Safety Tips for <code>while</code> Loops","text":"Problem Cause Fix Loop never ends Condition always true Add a <code>break</code> or update a counter CPU stuck at 100% Empty loop body Add a small <code>sleep</code> if needed Infinite input loop Waiting on input forever Add a timeout, <code>ctrl+c</code> or <code>read -t</code>"},{"location":"lessons/05-loops_and_iteration/while_loops/#optional-delay-with-sleep","title":"\ud83d\udca4 Optional: Delay with <code>sleep</code>","text":"<pre><code>while true\ndo\n  echo \"Heartbeat...\"\n  sleep 2  # wait 2 seconds\ndone\n</code></pre> <p>\u2705 Helps avoid hammering the CPU in background monitoring loops.</p>"},{"location":"lessons/05-loops_and_iteration/while_loops/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Loop Type Description Example <code>while [ condition ]</code> Loops while condition is true <code>[ $count -lt 10 ]</code> <code>while true</code> Infinite loop <code>while true; do ...</code> <code>while read</code> Line-by-line file reader <code>read -r line</code>"},{"location":"lessons/06-file_and_directories/IO_redirection/","title":"\ud83d\udce5\ud83d\udce4 Input/Output Redirection in Bash","text":""},{"location":"lessons/06-file_and_directories/IO_redirection/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Understand standard input, output, and error in Bash.</li> <li>Redirect output to files using <code>&gt;</code>, <code>&gt;&gt;</code>, and <code>&lt;</code>.</li> <li>Capture errors and logs.</li> <li>Use here-documents (<code>&lt;&lt;</code>) to provide multi-line input.</li> <li>Create and use logs effectively in scripts.</li> </ul>"},{"location":"lessons/06-file_and_directories/IO_redirection/#1-bash-io-streams-overview","title":"\ud83d\udccc 1. Bash I/O Streams Overview","text":"Stream Description File Descriptor <code>stdin</code> Standard Input 0 <code>stdout</code> Standard Output 1 <code>stderr</code> Standard Error 2"},{"location":"lessons/06-file_and_directories/IO_redirection/#2-redirecting-output-to-a-file","title":"\u27a1\ufe0f 2. Redirecting Output to a File (<code>&gt;</code>)","text":"<pre><code>echo \"Hello world!\" &gt; hello.txt\n</code></pre> <ul> <li>Creates <code>hello.txt</code> and writes the output to it.</li> <li>If the file exists, it will be overwritten.</li> </ul>"},{"location":"lessons/06-file_and_directories/IO_redirection/#3-appending-to-a-file","title":"\u2795 3. Appending to a File (<code>&gt;&gt;</code>)","text":"<pre><code>echo \"Another line\" &gt;&gt; hello.txt\n</code></pre> <ul> <li>Adds to the end of the file instead of replacing it.</li> </ul>"},{"location":"lessons/06-file_and_directories/IO_redirection/#4-redirecting-input","title":"\u2b05\ufe0f 4. Redirecting Input (<code>&lt;</code>)","text":"<pre><code>while read line\ndo\n  echo \"Line: $line\"\ndone &lt; hello.txt\n</code></pre> <ul> <li>Feeds the content of <code>hello.txt</code> into the loop.</li> <li>Used when a command/script expects input from a file.</li> </ul>"},{"location":"lessons/06-file_and_directories/IO_redirection/#5-redirecting-errors-2-and-2","title":"\u2757 5. Redirecting Errors (<code>2&gt;</code> and <code>2&gt;&gt;</code>)","text":"<pre><code>ls nonexistentfile 2&gt; errors.log\n</code></pre> <ul> <li>Redirects stderr to a file.</li> <li>Use <code>2&gt;&gt;</code> to append error messages.</li> </ul>"},{"location":"lessons/06-file_and_directories/IO_redirection/#redirect-stdout-and-stderr-together","title":"\u2705 Redirect <code>stdout</code> and <code>stderr</code> Together","text":"<pre><code>command &gt; all.log 2&gt;&amp;1\n</code></pre> <ul> <li>Redirects both normal output and errors into the same file.</li> <li><code>2&gt;&amp;1</code> means \"send stderr to the same place as stdout.\"</li> </ul>"},{"location":"lessons/06-file_and_directories/IO_redirection/#6-use-case-script-logging-example","title":"\ud83d\udcc2 6. Use Case: Script Logging Example","text":"<pre><code>#!/bin/bash\n\nlogfile=\"backup.log\"\n\necho \"Starting backup...\" &gt; \"$logfile\"\n\ncp myfile.txt backup/ 2&gt;&gt; \"$logfile\"\n\necho \"Backup complete at $(date)\" &gt;&gt; \"$logfile\"\n</code></pre> <ul> <li>\u2705 First line overwrites the old log</li> <li>\u2705 Errors from <code>cp</code> get appended</li> <li>\u2705 Timestamp is added at the end</li> </ul>"},{"location":"lessons/06-file_and_directories/IO_redirection/#7-here-document-for-multi-line-input","title":"\ud83d\udcdc 7. Here-Document (<code>&lt;&lt;</code>) for Multi-line Input","text":"<p>A here-doc is a block of text redirected into a command.</p>"},{"location":"lessons/06-file_and_directories/IO_redirection/#example-use-cat-to-create-a-file","title":"Example: Use <code>cat</code> to Create a File","text":"<pre><code>cat &lt;&lt; EOF &gt; intro.txt\nWelcome to the Bash course.\nThis file was generated using a here-doc.\nEOF\n</code></pre> <ul> <li>Everything between <code>&lt;&lt; EOF</code> and <code>EOF</code> is treated as input to <code>cat</code></li> <li><code>EOF</code> can be replaced with any unique token</li> <li>Can be combined with <code>&gt;&gt;</code> to append instead of overwrite</li> </ul>"},{"location":"lessons/06-file_and_directories/IO_redirection/#real-world-example-creating-a-template-script","title":"\ud83e\uddea Real-World Example: Creating a Template Script","text":"<pre><code>cat &lt;&lt; 'END' &gt; starter.sh\n#!/bin/bash\n\n# Author: Your Name\n# Created: $(date)\n# Description: Starter script\n\necho \"Script started\"\nEND\n</code></pre> <p>Tip: Use single quotes (<code>&lt;&lt; 'END'</code>) to prevent variable expansion like <code>$(date)</code>.</p>"},{"location":"lessons/06-file_and_directories/IO_redirection/#best-practices","title":"\ud83e\uddfc Best Practices","text":"Tip Why Use <code>&gt;&gt;</code> for logs Avoid overwriting data Redirect both <code>stdout</code> and <code>stderr</code> Capture everything Use here-docs for config/scripts/templates Easier than <code>echo</code> line-by-line Always quote filenames Prevent bugs with spaces"},{"location":"lessons/06-file_and_directories/IO_redirection/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Operator Meaning Use Case <code>&gt;</code> Redirect output (overwrite) Save command output <code>&gt;&gt;</code> Redirect output (append) Add logs to a file <code>&lt;</code> Redirect input Read from a file <code>2&gt;</code> Redirect errors Save stderr to a file <code>2&gt;&gt;</code> Append stderr Add errors to log <code>&amp;&gt;</code> Redirect stdout and stderr (Bash 4+) One-file logging <code>&lt;&lt;</code> Here-document Pass multi-line input <code>&lt;&lt;-</code> Here-doc that allows tab-indented content Cleaner formatting in scripts"},{"location":"lessons/06-file_and_directories/globbing_in_bash/","title":"\ud83c\udf1f Globbing in Bash (<code>*</code>, <code>?</code>, <code>[]</code>)","text":""},{"location":"lessons/06-file_and_directories/globbing_in_bash/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Understand what globbing is and how it differs from regular expressions.</li> <li>Use wildcard patterns (<code>*</code>, <code>?</code>, <code>[]</code>) to match files and strings.</li> <li>Avoid dangerous patterns that can affect the wrong files.</li> <li>Apply globbing in real-world use cases like loops, cleanup scripts, and automation.</li> </ul>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#what-is-globbing","title":"\ud83d\udd0d What Is Globbing?","text":"<p>Globbing is pattern matching used by the shell (like Bash) to match filenames and paths.</p> <p>Globbing is not the same as regex (regular expressions).</p> Feature Globbing Regex Used for File matching Text matching Who interprets it The shell (Bash) Programs like <code>grep</code>, <code>sed</code>, <code>awk</code> Syntax Simpler (<code>*</code>, <code>?</code>, <code>[abc]</code>) More powerful and complex"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#globbing-patterns","title":"\ud83d\udd27 Globbing Patterns","text":""},{"location":"lessons/06-file_and_directories/globbing_in_bash/#asterisk","title":"<code>*</code> (asterisk)","text":"<p>Matches zero or more characters (except <code>/</code>)</p> <pre><code>ls *.txt        # All .txt files\nls *file*       # All files that contain \"file\"\n</code></pre>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#question-mark","title":"<code>?</code> (question mark)","text":"<p>Matches exactly one character</p> <pre><code>ls file?.txt    # Matches file1.txt, fileA.txt, but not file10.txt\n</code></pre>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#character-class","title":"<code>[]</code> (character class)","text":"<p>Matches any single character inside the brackets</p> <pre><code>ls file[123].txt    # Matches file1.txt, file2.txt, file3.txt\nls report[AB].pdf   # Matches reportA.pdf or reportB.pdf\n</code></pre> <p>You can also use ranges:</p> <pre><code>ls file[a-z].txt    # a to z\nls file[0-9].log    # 0 to 9\n</code></pre>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#safe-patterns-and-practices","title":"\ud83d\udd12 Safe Patterns and Practices","text":""},{"location":"lessons/06-file_and_directories/globbing_in_bash/#1-always-quote-variables-when-using-globbing","title":"1. Always quote variables when using globbing","text":"<pre><code>for file in *.txt; do\n  echo \"$file\"\ndone\n</code></pre> <p>\u2705 Correct \u2013 prevents issues with spaces or weird filenames.</p> <pre><code>for file in *.txt; do\n  rm \"$file\"\ndone\n</code></pre>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#2-use-set-u-and-set-o-nounset-to-avoid-undefined-variables","title":"2. Use <code>set -u</code> and <code>set -o nounset</code> to avoid undefined variables.","text":""},{"location":"lessons/06-file_and_directories/globbing_in_bash/#3-use-nullglob-to-avoid-unintended-behavior","title":"3. Use <code>nullglob</code> to avoid unintended behavior","text":"<p>If no files match, <code>*.txt</code> will expand to <code>*.txt</code> (the literal string) \u2014 potentially dangerous in scripts like:</p> <pre><code>rm *.txt   # If no .txt files exist, this could delete *.txt\n</code></pre> <p>To avoid this, use:</p> <pre><code>shopt -s nullglob\n</code></pre> <p>\u2705 Now <code>*.txt</code> will expand to nothing if no match is found.</p>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#examples","title":"\ud83e\uddea Examples","text":""},{"location":"lessons/06-file_and_directories/globbing_in_bash/#match-all-shell-scripts","title":"Match all shell scripts:","text":"<pre><code>ls *.sh\n</code></pre>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#find-all-files-starting-with-data","title":"Find all files starting with <code>data</code>:","text":"<pre><code>ls data*\n</code></pre>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#match-files-like-log1txt-log2txt-log9txt","title":"Match files like <code>log1.txt</code>, <code>log2.txt</code>, ..., <code>log9.txt</code>","text":"<pre><code>ls log[1-9].txt\n</code></pre>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#match-a-specific-number-of-characters","title":"Match a specific number of characters:","text":"<pre><code>ls file??.txt    # Matches file01.txt, file99.txt (2 chars after \"file\")\n</code></pre>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#what-globbing-cant-do","title":"\ud83d\udeab What Globbing Can\u2019t Do","text":"<p>Globbing:</p> <ul> <li>Can\u2019t match repeating patterns (like <code>a+</code>)</li> <li>Can\u2019t do lookaheads/lookbehinds</li> <li>Can\u2019t match start/end of line with <code>^</code> or <code>$</code></li> </ul> <p>For those, you need regex with <code>grep</code>, <code>sed</code>, <code>awk</code>, etc.</p>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#real-world-example-clean-up-old-files","title":"\ud83e\uddf0 Real-World Example: Clean Up Old Files","text":"<pre><code>#!/bin/bash\n\n# Clean up all .bak and .tmp files in current directory\nshopt -s nullglob  # Avoids expanding to literal patterns if nothing matches\n\nfor file in *.bak *.tmp\ndo\n  echo \"Deleting $file\"\n  rm \"$file\"\ndone\n</code></pre> <ul> <li>\u2705 Safe from accidental deletion if no matches</li> <li>\u2705 Works across multiple extensions</li> </ul>"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"Mistake Problem Fix Using unquoted variables Breaks on filenames with spaces Always quote: <code>\"$file\"</code> Assuming <code>*.ext</code> is always safe Expands to <code>*.ext</code> if no matches Use <code>shopt -s nullglob</code> Confusing regex with glob Wrong pattern syntax Use glob for filenames only"},{"location":"lessons/06-file_and_directories/globbing_in_bash/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Pattern Meaning Example Match <code>*</code> Zero or more characters <code>*.txt</code> \u2192 <code>note.txt</code>, <code>hello.txt</code> <code>?</code> Exactly one character <code>file?.sh</code> \u2192 <code>file1.sh</code> <code>[abc]</code> Any one of listed chars <code>log[12].txt</code> \u2192 <code>log1.txt</code>, <code>log2.txt</code> <code>[a-z]</code> Character range <code>file[a-f].md</code> \u2192 <code>filea.md</code> to <code>filef.md</code>"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/","title":"\ud83d\udcc4 Reading Files Line-by-Line in Bash","text":""},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Use <code>while read</code> loops to process files one line at a time.</li> <li>Handle spaces, tabs, empty lines, and special characters safely.</li> <li>Split CSV or delimited files into variables.</li> <li>Avoid common mistakes when reading files in Bash.</li> </ul>"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#basic-syntax","title":"\ud83d\udd27 Basic Syntax","text":"<pre><code>while read line\ndo\n  echo \"$line\"\ndone &lt; file.txt\n</code></pre> <p>\u2705 Reads the file line-by-line, stores each line in the <code>line</code> variable.</p>"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#safer-version-recommended","title":"\u26a0\ufe0f Safer Version (Recommended)","text":"<pre><code>while IFS= read -r line\ndo\n  echo \"$line\"\ndone &lt; file.txt\n</code></pre>"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#why-this-is-better","title":"Why this is better:","text":"Option Purpose <code>IFS=</code> Prevents trimming leading/trailing whitespace <code>-r</code> Tells <code>read</code> not to interpret backslashes (no escaping)"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#example-print-all-lines-in-a-text-file","title":"\ud83e\uddea Example: Print All Lines in a Text File","text":"<p>file.txt</p> <pre><code>Alice\nBob\nCharlie\n</code></pre> <p>Script:</p> <pre><code>while IFS= read -r line\ndo\n  echo \"User: $line\"\ndone &lt; file.txt\n</code></pre> <p>Output:</p> <pre><code>User: Alice\nUser: Bob\nUser: Charlie\n</code></pre>"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#example-process-csv-data","title":"\ud83d\udcca Example: Process CSV Data","text":"<p>users.csv</p> <pre><code>John,28,Engineer\nSarah,34,Designer\nMike,22,Student\n</code></pre> <p>Script:</p> <pre><code>while IFS=',' read -r name age profession\ndo\n  echo \"$name is a $age-year-old $profession.\"\ndone &lt; users.csv\n</code></pre> <p>Output:</p> <pre><code>John is a 28-year-old Engineer.\nSarah is a 34-year-old Designer.\nMike is a 22-year-old Student.\n</code></pre> <ul> <li>\u2705 Works perfectly for simple, clean CSVs</li> <li>\u2705 You can adjust <code>IFS=','</code> for other delimiters (e.g., tabs, pipes)</li> </ul>"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#best-practices","title":"\ud83e\uddfc Best Practices","text":"Tip Reason Use <code>IFS=</code> and <code>-r</code> Avoids whitespace trimming and escaping issues Always quote <code>\"$line\"</code> Handles spaces, special characters safely Avoid <code>for line in $(cat file)</code> Breaks on spaces and newlines! Validate the file exists first Prevents script crashes"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#real-world-use-case-cleanup-script","title":"\ud83e\uddf0 Real-World Use Case: Cleanup Script","text":"<p>filenames.txt</p> <pre><code>old_backup1.tar.gz\nold_backup2.tar.gz\nold_backup3.tar.gz\n</code></pre> <p>Script:</p> <pre><code>while IFS= read -r file\ndo\n  if [ -f \"$file\" ]; then\n    echo \"Deleting $file\"\n    rm \"$file\"\n  else\n    echo \"File not found: $file\"\n  fi\ndone &lt; filenames.txt\n</code></pre> <ul> <li>\u2705 Checks if each file exists before deleting</li> <li>\u2705 Good for automation and cron jobs</li> </ul>"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#pro-tip-you-can-use-process-substitution","title":"\ud83e\udde0 Pro Tip: You Can Use Process Substitution","text":"<p>This avoids <code>&lt; file</code> and works well in functions:</p> <pre><code>while IFS= read -r line\ndo\n  echo \"Line: $line\"\ndone &lt; &lt;(grep \"error\" logfile.txt)\n</code></pre> <p><code>&lt; &lt;(command)</code> feeds the output of the command directly into the loop.</p>"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"Mistake What Happens Fix <code>read line</code> without <code>-r</code> Backslashes get lost Add <code>-r</code> <code>IFS= read -r</code> but don\u2019t quote variables Lines with spaces break Always quote <code>\"$line\"</code> Using <code>for line in $(cat file)</code> Breaks on spaces/tabs Use <code>while read</code> instead"},{"location":"lessons/06-file_and_directories/reading_files_in_bash/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Pattern Use Case <code>while read line; do ...; done &lt; file</code> Basic reading <code>IFS= read -r line</code> Safe line handling <code>IFS=',' read -r col1 col2</code> CSV parsing <code>done &lt; &lt;(command)</code> Process substitution"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/","title":"\ud83d\udee0\ufe0f Automating File Management with Bash","text":""},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this guide, learners will:</p> <ul> <li>Rename files using consistent patterns (e.g. <code>photo_001.jpg</code>)</li> <li>Clean up unwanted files (e.g. <code>.tmp</code>, <code>.log</code>)</li> <li>Create automated backups</li> <li>Categorize files by type or date</li> </ul>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#1-renaming-files-automatically","title":"\ud83d\udd01 1. Renaming Files Automatically","text":"<p>Renaming a batch of files using a loop helps you organize messy or randomly-named files (like camera dumps or downloads).</p>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#rename-jpgs-to-photo_1jpg-photo_2jpg-etc","title":"\u2705 Rename JPGs to <code>photo_1.jpg</code>, <code>photo_2.jpg</code>, etc.","text":"<pre><code>#!/bin/bash\n\ncount=1\n\nfor file in *.jpg\ndo\n  mv \"$file\" \"photo_$count.jpg\"\n  ((count++))\ndone\n</code></pre> <p>\ud83d\udca1 Best Practices:</p> <ul> <li>Always quote <code>\"$file\"</code> to handle spaces.</li> <li>Use <code>printf</code> to pad numbers with zeros:</li> </ul> <pre><code>mv \"$file\" \"$(printf 'photo_%03d.jpg' \"$count\")\"\n</code></pre>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#2-cleaning-up-unwanted-files","title":"\ud83e\uddf9 2. Cleaning Up Unwanted Files","text":"<p>You can automate the deletion of temporary, log, or cache files using globbing and <code>rm</code>.</p>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#delete-tmp-and-log-files","title":"\u2705 Delete <code>.tmp</code> and <code>.log</code> files","text":"<pre><code>#!/bin/bash\n\nshopt -s nullglob  # avoid deleting wrong files\n\nfor file in *.tmp *.log\ndo\n  echo \"Deleting: $file\"\n  rm \"$file\"\ndone\n</code></pre> <p>\ud83d\udca1 Add a prompt to confirm deletion:</p> <pre><code>read -p \"Delete $file? (y/n): \" answer\nif [[ \"$answer\" = \"y\" ]]; then rm \"$file\"; fi\n</code></pre>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#3-creating-simple-file-backups","title":"\ud83d\udcbe 3. Creating Simple File Backups","text":"<p>You don\u2019t want to lose important config or data files \u2014 this script appends <code>.bak</code> to existing files or copies them into a backup folder.</p>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#append-bak-to-important-files","title":"\u2705 Append <code>.bak</code> to important files","text":"<pre><code>#!/bin/bash\n\nfor file in *.conf\ndo\n  cp \"$file\" \"$file.bak\"\ndone\n</code></pre>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#backup-files-into-a-directory-with-a-timestamp","title":"\u2705 Backup files into a directory with a timestamp","text":"<pre><code>#!/bin/bash\n\nbackup_dir=\"backup_$(date +%F_%H-%M-%S)\"\nmkdir \"$backup_dir\"\n\nfor file in *.txt\ndo\n  cp \"$file\" \"$backup_dir/\"\ndone\n\necho \"Backup saved to $backup_dir\"\n</code></pre>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#4-categorizing-files-by-type","title":"\ud83d\uddc2\ufe0f 4. Categorizing Files by Type","text":"<p>You can organize files by extension or file type (e.g., images, documents, scripts).</p>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#move-files-into-folders-based-on-extension","title":"\u2705 Move files into folders based on extension","text":"<pre><code>#!/bin/bash\n\nmkdir -p images docs scripts\n\nfor file in *\ndo\n  case \"$file\" in\n    *.jpg|*.png) mv \"$file\" images/ ;;\n    *.pdf|*.docx) mv \"$file\" docs/ ;;\n    *.sh) mv \"$file\" scripts/ ;;\n  esac\ndone\n</code></pre>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#sort-downloads-by-date","title":"\u2705 Sort downloads by date","text":"<pre><code>#!/bin/bash\n\nfor file in *\ndo\n  if [ -f \"$file\" ]; then\n    folder=$(date -r \"$file\" +%Y-%m-%d)\n    mkdir -p \"$folder\"\n    mv \"$file\" \"$folder/\"\n  fi\ndone\n</code></pre>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#5-safety-first-add-dry-run-mode","title":"\u26a0\ufe0f 5. Safety First \u2014 Add Dry-Run Mode","text":"<p>To prevent accidents, always test scripts with a dry-run mode before executing them.</p> <pre><code>dry_run=true\n\nfor file in *.txt\ndo\n  newname=\"renamed_$file\"\n  if $dry_run; then\n    echo \"[DRY RUN] mv $file $newname\"\n  else\n    mv \"$file\" \"$newname\"\n  fi\ndone\n</code></pre>"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#tools-and-commands-youll-use","title":"\ud83e\uddf0 Tools and Commands You\u2019ll Use","text":"Command Use <code>mv</code> Rename/move files <code>cp</code> Copy files <code>rm</code> Delete files <code>mkdir</code> Create folders <code>date</code> Generate timestamps <code>case</code> Conditional branching <code>shopt</code> Enable safe globbing (<code>nullglob</code>) <code>printf</code> Format numbers (e.g., 001, 002)"},{"location":"lessons/06-file_and_directories/script_automation_and_file_management/#summary","title":"\u2705 Summary","text":"<p>Automating file tasks in Bash saves time, reduces errors, and scales better than doing things manually. Here's a quick cheat-sheet:</p> Task Pattern / Tool Rename <code>for file in *; do mv \"$file\" newname; done</code> Clean up <code>rm *.tmp *.log</code> Backup <code>cp file file.bak</code> or <code>cp file backup/</code> Categorize <code>case</code> with <code>mv</code> Dry run <code>if $dry_run; then echo; else do; fi</code>"},{"location":"lessons/07-functions/defining_and_calling_functions/","title":"\ud83d\udd27 Defining and Using Functions in Bash","text":""},{"location":"lessons/07-functions/defining_and_calling_functions/#learning-objectives","title":"\ud83e\udde0 Learning Objectives","text":"<p>By the end of this lesson, learners will:</p> <ul> <li>Define and call functions in Bash</li> <li>Pass arguments to functions</li> <li>Use return codes and local variables</li> <li>Understand why functions are essential for script clarity and reusability</li> </ul>"},{"location":"lessons/07-functions/defining_and_calling_functions/#1-what-is-a-function-in-bash","title":"\ud83d\udce6 1. What Is a Function in Bash?","text":"<p>A function is a named block of code you can call multiple times in your script.</p>"},{"location":"lessons/07-functions/defining_and_calling_functions/#syntax-1-preferred","title":"\u2705 Syntax 1 (preferred):","text":"<pre><code>function say_hello() {\n  echo \"Hello!\"\n}\n</code></pre>"},{"location":"lessons/07-functions/defining_and_calling_functions/#syntax-2-sh-compatible","title":"\u2705 Syntax 2 (sh-compatible):","text":"<pre><code>say_hello() {\n  echo \"Hello!\"\n}\n</code></pre> <p>\ud83e\udde0 You don\u2019t need <code>function</code> keyword \u2014 both styles work. Use whichever feels cleaner to you.</p>"},{"location":"lessons/07-functions/defining_and_calling_functions/#2-calling-a-function","title":"\u25b6\ufe0f 2. Calling a Function","text":"<p>Just write its name like a command:</p> <pre><code>say_hello\n</code></pre>"},{"location":"lessons/07-functions/defining_and_calling_functions/#3-passing-arguments-to-functions","title":"\ud83d\udce8 3. Passing Arguments to Functions","text":"<p>Bash functions get arguments just like regular scripts:</p> <pre><code>greet() {\n  echo \"Hello, $1!\"\n}\n\ngreet \"Alice\"    # Output: Hello, Alice!\n</code></pre> Variable Meaning <code>$1</code> First argument <code>$2</code>, <code>$3</code>... Additional args <code>$@</code> All arguments"},{"location":"lessons/07-functions/defining_and_calling_functions/#example-a-reusable-logger-function","title":"\ud83e\uddea Example: A Reusable Logger Function","text":"<pre><code>log() {\n  timestamp=$(date +\"%Y-%m-%d %H:%M:%S\")\n  echo \"[$timestamp] $1\"\n}\n</code></pre> <p>Usage:</p> <pre><code>log \"Script started\"\nsleep 2\nlog \"Finished processing\"\n</code></pre> <p>Output:</p> <pre><code>[2025-07-07 14:30:01] Script started\n[2025-07-07 14:30:03] Finished processing\n</code></pre> <p>\u2705 Makes logging clean, consistent, and reusable!</p>"},{"location":"lessons/07-functions/defining_and_calling_functions/#4-returning-exit-codes-not-values","title":"\ud83d\udce6 4. Returning Exit Codes (not values)","text":"<p>Functions can return exit codes (not strings like other languages):</p> <pre><code>check_number() {\n  if [ \"$1\" -gt 10 ]; then\n    return 0    # success\n  else\n    return 1    # failure\n  fi\n}\n\ncheck_number 15 &amp;&amp; echo \"OK\" || echo \"Too small\"\n</code></pre> <p>\u2705 Use this style when writing validation checks.</p>"},{"location":"lessons/07-functions/defining_and_calling_functions/#5-use-local-for-local-variables","title":"\ud83d\udccc 5. Use <code>local</code> for Local Variables","text":"<p>Bash variables are global by default, even inside functions. Use <code>local</code> to prevent side effects:</p> <pre><code>add() {\n  local result=$(( $1 + $2 ))\n  echo $result\n}\n</code></pre> <p>\u2705 Keeps <code>result</code> from interfering with the rest of your script.</p>"},{"location":"lessons/07-functions/defining_and_calling_functions/#real-world-use-logger-with-levels","title":"\ud83e\uddf0 Real-World Use: Logger with Levels","text":"<pre><code>log() {\n  local level=\"$1\"\n  local message=\"$2\"\n  local timestamp=$(date +\"%F %T\")\n  echo \"[$timestamp][$level] $message\"\n}\n\nlog INFO \"Starting cleanup...\"\nlog ERROR \"Could not delete file\"\n</code></pre> <p>Output:</p> <pre><code>[2025-07-07 14:41:22][INFO] Starting cleanup...\n[2025-07-07 14:41:23][ERROR] Could not delete file\n</code></pre>"},{"location":"lessons/07-functions/defining_and_calling_functions/#when-and-why-to-use-functions","title":"\ud83e\uddfc When and Why to Use Functions","text":"\u2705 Use Functions When... \ud83d\udeab Avoid When... You repeat code blocks You're doing one-liners only You want better readability Your script is extremely short You're structuring large scripts You're still testing ideas interactively"},{"location":"lessons/07-functions/defining_and_calling_functions/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Feature Syntax Define <code>my_func() { ... }</code> Call <code>my_func</code> or <code>my_func args</code> Args <code>$1</code>, <code>$2</code>, <code>$@</code> Return code <code>return 1</code>, check with <code>$?</code> Scope Use <code>local</code> for local vars"},{"location":"lessons/07-functions/local_vs_global_variable/","title":"\ud83e\udde0 Local vs Global Variables in Bash","text":""},{"location":"lessons/07-functions/local_vs_global_variable/#what-is-variable-scope","title":"\ud83d\udea9 What Is Variable Scope?","text":"<p>In Bash:</p> <ul> <li>Global variables are accessible everywhere in the script (even inside functions).</li> <li>Local variables exist only within the function where they\u2019re declared.</li> </ul>"},{"location":"lessons/07-functions/local_vs_global_variable/#1-global-variables-default","title":"\ud83c\udf0d 1. Global Variables (Default)","text":"<p>By default, all variables in Bash are global, unless explicitly declared otherwise.</p> <pre><code>message=\"Hello from outside\"\n\ngreet() {\n  echo \"$message\"\n}\n\ngreet  # Output: Hello from outside\n</code></pre> <p>Here, the function <code>greet</code> can access the global variable <code>message</code>.</p>"},{"location":"lessons/07-functions/local_vs_global_variable/#global-variables-can-be-overwritten-accidentally","title":"\u26a0\ufe0f Global Variables Can Be Overwritten Accidentally","text":"<pre><code>count=5\n\nupdate_count() {\n  count=10\n}\n\nupdate_count\necho \"$count\"   # Output: 10 \ud83d\ude31\n</code></pre> <p>\ud83e\udde8 That\u2019s dangerous! The function modified a global variable, possibly without your intention.</p>"},{"location":"lessons/07-functions/local_vs_global_variable/#2-using-local-to-restrict-scope","title":"\ud83d\udd10 2. Using <code>local</code> to Restrict Scope","text":""},{"location":"lessons/07-functions/local_vs_global_variable/#declare-local-variables-inside-functions","title":"\u2705 Declare local variables inside functions:","text":"<pre><code>counter=0\n\nincrement() {\n  local counter=1\n  ((counter++))\n  echo \"Inside: $counter\"\n}\n\nincrement         # Inside: 2\necho \"Outside: $counter\"  # Outside: 0 \u2705\n</code></pre> <ul> <li><code>local counter=1</code> ensures the variable exists only within the function.</li> <li>The global <code>counter</code> remains untouched.</li> </ul>"},{"location":"lessons/07-functions/local_vs_global_variable/#example-function-with-local-variables","title":"\ud83e\uddea Example: Function with Local Variables","text":"<pre><code>add() {\n  local a=$1\n  local b=$2\n  local result=$((a + b))\n  echo \"$result\"\n}\n\nsum=$(add 3 4)\necho \"Sum: $sum\"\n</code></pre> <p>\u2705 Clean. <code>a</code>, <code>b</code>, and <code>result</code> are local to the function, reducing risk of name collision.</p>"},{"location":"lessons/07-functions/local_vs_global_variable/#summary-local-keyword","title":"\ud83d\udce6 Summary: <code>local</code> Keyword","text":"Syntax Effect <code>local var=value</code> Declares <code>var</code> inside function only <code>var=value</code> (no <code>local</code>) Declares or overwrites global var"},{"location":"lessons/07-functions/local_vs_global_variable/#scope-limitations","title":"\ud83d\udd2c Scope Limitations","text":"<ul> <li><code>local</code> only works inside functions</li> <li>Declaring <code>local</code> outside of a function throws an error:</li> </ul> <pre><code>local foo=bar  # \u274c will cause: \"local: can only be used in a function\"\n</code></pre>"},{"location":"lessons/07-functions/local_vs_global_variable/#best-practices-for-variable-scope","title":"\ud83d\udca1 Best Practices for Variable Scope","text":"Tip Why Use <code>local</code> inside functions Avoid unintentional global changes Use descriptive names for globals (<code>APP_ENV</code>, <code>CONFIG_DIR</code>) Prevent naming collisions Don\u2019t rely on globals for return values Use <code>echo</code> and <code>$(...)</code> instead Always initialize variables before use Prevent unexpected behavior"},{"location":"lessons/07-functions/local_vs_global_variable/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Scope Declared With Accessible In Notes Global <code>var=value</code> Anywhere Default in Bash Local <code>local var=...</code> Inside function Safer, recommended in funcs"},{"location":"lessons/07-functions/modular_functions/","title":"\ud83e\udde0 Structuring Larger Bash Scripts with Modular Functions","text":""},{"location":"lessons/07-functions/modular_functions/#why-modularize","title":"\ud83d\udce6 Why Modularize?","text":"\u2705 Good Practice \ud83d\udeab Bad Practice Reuse common functions Rewriting the same logic Easier to test/debug Huge, unreadable scripts Clean separation of logic Everything mashed together"},{"location":"lessons/07-functions/modular_functions/#1-structure-overview","title":"\ud83e\uddf1 1. Structure Overview","text":"<p>Here\u2019s a typical layout for a larger Bash script project:</p> <pre><code>my-script/\n\u251c\u2500\u2500 main.sh            # main entry point\n\u251c\u2500\u2500 utils.sh           # general helper functions\n\u251c\u2500\u2500 logging.sh         # all log-related functions\n\u251c\u2500\u2500 config.sh          # environment variables &amp; paths\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"lessons/07-functions/modular_functions/#2-defining-modular-function-files","title":"\ud83e\uddd1\u200d\ud83d\udcbb 2. Defining Modular Function Files","text":""},{"location":"lessons/07-functions/modular_functions/#loggingsh","title":"\ud83d\udcc4 <code>logging.sh</code>","text":"<pre><code>log() {\n  local level=${1:-INFO}\n  local message=${2:-\"No message provided\"}\n  echo \"[$(date '+%F %T')] [$level] $message\"\n}\n</code></pre>"},{"location":"lessons/07-functions/modular_functions/#utilssh","title":"\ud83d\udcc4 <code>utils.sh</code>","text":"<pre><code>backup_file() {\n  local file=$1\n  local dest_dir=$2\n\n  if [[ -f \"$file\" ]]; then\n    cp \"$file\" \"$dest_dir\"\n    log \"INFO\" \"Backed up $file to $dest_dir\"\n  else\n    log \"ERROR\" \"File $file not found\"\n  fi\n}\n</code></pre> <p>\ud83e\udde0 These files contain only functions \u2014 no code that runs on its own.</p>"},{"location":"lessons/07-functions/modular_functions/#3-using-source-or-to-include-files","title":"\ud83d\udd0c 3. Using <code>source</code> or <code>.</code> to Include Files","text":"<p>In your <code>main.sh</code>, you load other scripts like this:</p> <pre><code>#!/bin/bash\n\n# Load modules\nsource ./logging.sh\nsource ./utils.sh\n\n# Or the equivalent:\n# . ./logging.sh\n# . ./utils.sh\n\n# Use the functions\nlog \"INFO\" \"Script starting...\"\nbackup_file \"data.txt\" \"backups/\"\n</code></pre> <p>\u2705 Once sourced, all functions become available in the current script.</p>"},{"location":"lessons/07-functions/modular_functions/#tip-always-check-if-the-file-exists-before-sourcing","title":"\ud83d\udca1 Tip: Always check if the file exists before sourcing","text":"<pre><code>[ -f \"./utils.sh\" ] &amp;&amp; source \"./utils.sh\"\n</code></pre>"},{"location":"lessons/07-functions/modular_functions/#4-real-example-a-backup-tool","title":"\ud83e\uddea 4. Real Example: A Backup Tool","text":""},{"location":"lessons/07-functions/modular_functions/#file-mainsh","title":"\ud83d\udcc1 File: <code>main.sh</code>","text":"<pre><code>#!/bin/bash\n\nsource config.sh\nsource logging.sh\nsource utils.sh\n\nlog \"INFO\" \"Backup started\"\nbackup_file \"$TARGET_FILE\" \"$BACKUP_DIR\"\nlog \"INFO\" \"Backup finished\"\n</code></pre>"},{"location":"lessons/07-functions/modular_functions/#file-configsh","title":"\ud83d\udcc1 File: <code>config.sh</code>","text":"<pre><code>#!/bin/bash\n\n# Centralized variables\nTARGET_FILE=\"important.txt\"\nBACKUP_DIR=\"./backups\"\n</code></pre>"},{"location":"lessons/07-functions/modular_functions/#best-practices-for-modular-bash-projects","title":"\ud83e\uddfc Best Practices for Modular Bash Projects","text":"Tip Why it helps Use <code>source</code> to reuse functions Clean, avoids duplication Keep files focused by topic Easier to navigate &amp; maintain Avoid global variables if possible Reduce unexpected side effects Separate config from logic Makes your script more portable Use consistent naming conventions e.g. <code>log_</code>, <code>util_</code>, <code>backup_</code>"},{"location":"lessons/07-functions/modular_functions/#bonus-prevent-functions-from-running-on-import","title":"\ud83d\udd12 Bonus: Prevent Functions from Running on Import","text":"<p>If you include code at the bottom of a function file, wrap it in a check:</p> <pre><code># Only run this block if the file is executed directly\nif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n  echo \"This file is meant to be sourced, not executed.\"\n  exit 1\nfi\n</code></pre>"},{"location":"lessons/07-functions/modular_functions/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Concept Example Source a file <code>source ./file.sh</code> or <code>. ./file.sh</code> Function file <code>backup_file() { ... }</code> Main runner <code>main.sh</code> calls <code>source</code> and uses functions Check execution context <code>[[ ${BASH_SOURCE[0]} == $0 ]]</code>"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/","title":"\ud83e\udde0 Passing Arguments &amp; Returning Values in Bash Functions","text":""},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#goals","title":"\ud83c\udfaf Goals:","text":"<ul> <li>Learn how to pass arguments like <code>$1</code>, <code>$2</code>, etc.</li> <li>Validate or handle missing arguments</li> <li>Return values via <code>echo</code> (standard way)</li> <li>Use global variables when necessary</li> </ul>"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#1-passing-arguments-to-functions","title":"\ud83d\udce8 1. Passing Arguments to Functions","text":"<p>Bash functions accept arguments just like scripts:</p> <pre><code>greet_user() {\n  echo \"Hello, $1!\"\n}\n\ngreet_user \"Alice\"\n</code></pre> Special Variable Description <code>$1</code>, <code>$2</code>, \u2026 Positional arguments <code>$@</code> All arguments, space-separated <code>$#</code> Number of arguments"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#2-handling-missing-arguments","title":"\ud83d\udd0d 2. Handling Missing Arguments","text":"<p>Use conditionals to ensure required arguments are passed.</p> <pre><code>greet_user() {\n  if [ -z \"$1\" ]; then\n    echo \"Error: No name provided\"\n    return 1\n  fi\n\n  echo \"Hello, $1!\"\n}\n\ngreet_user            # Error\ngreet_user \"Charlie\"  # OK\n</code></pre>"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#breakdown","title":"\ud83d\udd27 Breakdown:","text":"<ul> <li><code>-z \"$1\"</code> checks if the first argument is empty.</li> <li><code>return 1</code> exits the function with a non-zero (failure) code.</li> </ul>"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#3-return-values-in-bash-functions","title":"\ud83d\udd01 3. Return Values in Bash Functions","text":""},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#return-is-not-for-returning-data-its-for-exit-status-only-like-0-success-1-failure","title":"\u274c <code>return</code> is not for returning data \u2014 it's for exit status only (like 0 = success, 1 = failure).","text":""},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#use-echo-to-return-data","title":"\u2705 Use <code>echo</code> to return data:","text":"<pre><code>add() {\n  local sum=$(( $1 + $2 ))\n  echo \"$sum\"\n}\n\nresult=$(add 3 5)\necho \"Result is $result\"\n</code></pre> <p>\u2705 This captures the output of the function in a variable using <code>$(...)</code>.</p>"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#4-using-global-variables-only-if-needed","title":"\ud83d\udca1 4. Using Global Variables (only if needed)","text":"<p>Sometimes, especially in older Bash code, functions set a global variable instead of echoing:</p> <pre><code>multiply() {\n  result=$(( $1 * $2 ))  # global var\n}\n\nmultiply 3 4\necho \"Product: $result\"\n</code></pre> <p>\u26a0\ufe0f Be careful:</p> <ul> <li>This works, but global variables can accidentally be overwritten.</li> <li>Prefer <code>local</code> and <code>echo</code> for safety and clarity.</li> </ul>"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#example-safe-division-function","title":"\ud83d\udcac Example: Safe Division Function","text":"<pre><code>divide() {\n  if [ \"$2\" -eq 0 ]; then\n    echo \"Error: Division by zero\"\n    return 1\n  fi\n\n  echo $(( $1 / $2 ))\n}\n\noutput=$(divide 10 2)\necho \"Output: $output\"\n\ndivide 5 0  # Error\n</code></pre>"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#real-world-function-logging-with-optional-levels","title":"\ud83d\udce6 Real-World Function: Logging With Optional Levels","text":"<pre><code>log() {\n  local level=${1:-INFO}\n  local message=${2:-\"No message provided\"}\n\n  echo \"[$(date '+%F %T')] [$level] $message\"\n}\n\nlog \"INFO\" \"System started\"\nlog \"ERROR\" \"Something failed\"\nlog         # Uses default values\n</code></pre> <p>\u2705 <code>${1:-default}</code> is Bash parameter expansion \u2014 supplies a fallback if empty.</p>"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#best-practices","title":"\ud83e\uddfc Best Practices","text":"Practice Why It Matters Always check for <code>$#</code> or <code>-z</code> Prevents missing arg bugs Use <code>echo</code> for value return Standard, clean, and portable Quote variables Prevents issues with spaces/specials Avoid global vars unless needed Reduces bugs and variable conflicts Use <code>local</code> inside functions Keeps variables scoped safely"},{"location":"lessons/07-functions/passing_arguments_and_returning_values/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Feature Syntax Example Positional args <code>$1</code>, <code>$2</code>, <code>$@</code> Check args count <code>if [ $# -lt 2 ]; then ...</code> Default values <code>${1:-default}</code> Return a value <code>echo \"$value\"</code> then <code>$(...)</code> Exit with status <code>return 0</code> or <code>return 1</code> Global var (rare) <code>result=...</code>"},{"location":"lessons/08-advance/debugging_bash_scripts/","title":"Debugging Bash Scripts in Bash","text":""},{"location":"lessons/08-advance/debugging_bash_scripts/#why-debugging-matters","title":"\ud83c\udfaf Why Debugging Matters","text":"<p>Unlike compiled languages, Bash is interpreted line by line. That means:</p> <ul> <li>Silent failures can happen often.</li> <li>Typos, missing variables, or logic errors are common.</li> <li>You must be proactive in catching and diagnosing issues.</li> </ul> <p>This lesson teaches you how to find and fix those bugs effectively.</p>"},{"location":"lessons/08-advance/debugging_bash_scripts/#1-use-set-x-to-trace-execution","title":"\ud83e\uddea 1. Use <code>set -x</code> to Trace Execution","text":""},{"location":"lessons/08-advance/debugging_bash_scripts/#what-it-does","title":"\ud83d\udd0d What it does:","text":"<p>Prints each command and its arguments as they execute. Super useful to see what the script is actually doing.</p> <pre><code>#!/bin/bash\nset -x\n\nname=\"Alice\"\necho \"Hello, $name\"\n</code></pre>"},{"location":"lessons/08-advance/debugging_bash_scripts/#output","title":"Output:","text":"<pre><code>+ name=Alice\n+ echo 'Hello, Alice'\nHello, Alice\n</code></pre> <p>\u2705 Great for step-by-step tracing \u274c Can get noisy \u2014 use selectively.</p>"},{"location":"lessons/08-advance/debugging_bash_scripts/#2-use-set-v-to-show-script-lines","title":"\ud83e\uddf0 2. Use <code>set -v</code> to Show Script Lines","text":"<p>Shows each line of the script as it\u2019s read (even before execution).</p> <pre><code>set -v\n</code></pre> <p>You can also combine both:</p> <pre><code>set -xv\n</code></pre>"},{"location":"lessons/08-advance/debugging_bash_scripts/#disable-tracing-when-needed","title":"\ud83e\uddfc Disable Tracing When Needed","text":"<p>To prevent logging sensitive data or clutter:</p> <pre><code>set +x  # turn off debug printing\n</code></pre> <p>Use this when handling secrets like passwords or tokens.</p>"},{"location":"lessons/08-advance/debugging_bash_scripts/#3-trap-errors-and-show-info","title":"\ud83d\udee0 3. Trap Errors and Show Info","text":"<p>Use <code>trap</code> to capture and respond to script errors.</p>"},{"location":"lessons/08-advance/debugging_bash_scripts/#example","title":"Example:","text":"<pre><code>trap 'echo \"\u26a0\ufe0f Error on line $LINENO\"; exit 1' ERR\n</code></pre> <p>This line:</p> <ul> <li>Triggers when any error occurs</li> <li>Prints the line number</li> <li>Exits with failure</li> </ul> <p>\ud83d\udd12 Safer with <code>set -e</code>:</p> <pre><code>set -e\ntrap 'echo \"Error at line $LINENO\"; exit 1' ERR\n</code></pre>"},{"location":"lessons/08-advance/debugging_bash_scripts/#real-example-debug-setup-template","title":"\ud83d\udcc1 Real Example: Debug Setup Template","text":"<pre><code>#!/bin/bash\nset -euo pipefail\ntrap 'echo \"\u274c Error on line $LINENO\"; exit 1' ERR\n\nset -x  # enable tracing\n\necho \"Script started\"\nmkdir -p /tmp/testdir\ncd /tmp/testdir\ntouch file.txt\ncat missingfile.txt  # will cause an error\n</code></pre>"},{"location":"lessons/08-advance/debugging_bash_scripts/#output_1","title":"Output:","text":"<pre><code>+ echo 'Script started'\nScript started\n+ mkdir -p /tmp/testdir\n+ cd /tmp/testdir\n+ touch file.txt\n+ cat missingfile.txt\ncat: missingfile.txt: No such file or directory\n\u274c Error on line 9\n</code></pre>"},{"location":"lessons/08-advance/debugging_bash_scripts/#4-logging-for-debugging","title":"\ud83d\udccb 4. Logging for Debugging","text":"<p>Instead of printing everything live, use a log file to track events.</p>"},{"location":"lessons/08-advance/debugging_bash_scripts/#example_1","title":"Example:","text":"<pre><code>log() {\n  echo \"[$(date '+%F %T')] $1\" &gt;&gt; debug.log\n}\n\nlog \"Script started\"\nlog \"Running task A\"\n</code></pre> <p>\u2705 Logs can be reviewed even if the script crashes.</p>"},{"location":"lessons/08-advance/debugging_bash_scripts/#5-common-bash-errors-and-fixes","title":"\ud83d\udea8 5. Common Bash Errors and Fixes","text":"Error Cause Fix <code>command not found</code> Typo or missing program Check spelling, install package <code>line N: syntax error near ...</code> Bad formatting (e.g., missing <code>fi</code>, <code>do</code>) Check indentation and block structure <code>unbound variable</code> Accessing unset var with <code>set -u</code> Use <code>${VAR:-default}</code> or check existence <code>No such file or directory</code> Wrong path or missing file Use <code>ls</code>/<code>pwd</code> to confirm <code>Permission denied</code> Missing executable bit or access rights Run <code>chmod +x</code>, check permissions"},{"location":"lessons/08-advance/debugging_bash_scripts/#best-practices-for-debugging-bash","title":"\ud83e\uddfc Best Practices for Debugging Bash","text":"Practice Why It Helps Use <code>set -x</code> for step tracing See what\u2019s being executed Use <code>trap</code> with <code>$LINENO</code> Pinpoint where the error happens Use <code>set -euo pipefail</code> Fail early, detect bad assumptions Write logs to a file Persist data across runs for diagnosis Comment out lines when testing Avoid accidental execution of dangerous steps"},{"location":"lessons/08-advance/debugging_bash_scripts/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Tool Purpose <code>set -x</code> Trace each command before execution <code>set -v</code> Show lines as read (before execution) <code>trap</code> Handle errors, clean up, debug info <code>$LINENO</code> Reports line number of error Logs Persist output for review/debugging"},{"location":"lessons/08-advance/environment_variables/","title":"Environment Variables and <code>export</code> in Bash","text":""},{"location":"lessons/08-advance/environment_variables/#what-are-environment-variables","title":"\ud83d\udccc What Are Environment Variables?","text":"<p>An environment variable is a key-value pair stored in your shell\u2019s environment that affects the behavior of processes and programs.</p> <p>They:</p> <ul> <li>Hold important system data (<code>PATH</code>, <code>HOME</code>, <code>USER</code>, etc.)</li> <li>Let you configure programs without hardcoding values</li> <li>Are inherited by child processes</li> </ul>"},{"location":"lessons/08-advance/environment_variables/#shell-variables-vs-environment-variables","title":"\ud83c\udd9a Shell Variables vs. Environment Variables","text":"Type Defined With Inherited by Child Processes? Example Use Shell variable <code>name=value</code> \u274c No Temporary script values Environment var <code>export name=value</code> \u2705 Yes App configuration, system values"},{"location":"lessons/08-advance/environment_variables/#shell-variable-local-to-the-shell","title":"\u2705 Shell Variable (local to the shell)","text":"<pre><code>GREETING=\"Hello\"\n</code></pre> <p>This variable is only available in the current shell. If you open a new terminal or call another script, it's gone.</p>"},{"location":"lessons/08-advance/environment_variables/#environment-variable-available-to-subprocesses","title":"\u2705 Environment Variable (available to subprocesses)","text":"<pre><code>export GREETING=\"Hello\"\n</code></pre> <p>Now <code>GREETING</code> is passed to child processes.</p> <pre><code>bash -c 'echo $GREETING'   # Output: Hello\n</code></pre>"},{"location":"lessons/08-advance/environment_variables/#using-export","title":"\ud83d\udd27 Using <code>export</code>","text":"<p>You can export a new or existing variable:</p> <pre><code>MY_VAR=\"world\"\nexport MY_VAR\n</code></pre> <p>Or in one line:</p> <pre><code>export MY_VAR=\"world\"\n</code></pre>"},{"location":"lessons/08-advance/environment_variables/#real-life-example-configuring-script-behavior","title":"\ud83d\udee0 Real-Life Example: Configuring Script Behavior","text":"<pre><code>#!/bin/bash\n\nexport ENV=\"production\"\n\nrun_script() {\n  echo \"Running in $ENV mode\"\n}\n\nrun_script\n</code></pre> <p>\u2705 This script can be reused by other scripts or shells that respect the <code>ENV</code> variable.</p>"},{"location":"lessons/08-advance/environment_variables/#making-environment-variables-permanent","title":"\ud83d\udcc1 Making Environment Variables Permanent","text":"<p>To make a variable persist across sessions (e.g. every time you open a terminal), add it to:</p> <ul> <li><code>~/.bashrc</code> \u2192 for interactive shells</li> <li><code>~/.bash_profile</code> or <code>~/.profile</code> \u2192 login shells</li> </ul>"},{"location":"lessons/08-advance/environment_variables/#example-bashrc","title":"Example (<code>~/.bashrc</code>):","text":"<pre><code>export EDITOR=nano\nexport PATH=\"$PATH:$HOME/scripts\"\n</code></pre> <p>Then run:</p> <pre><code>source ~/.bashrc   # Apply changes immediately\n</code></pre>"},{"location":"lessons/08-advance/environment_variables/#best-practices-for-environment-variables","title":"\ud83e\uddfc Best Practices for Environment Variables","text":"Rule Why It Matters Use uppercase names (<code>MY_CONFIG</code>) Consistency and convention Avoid using <code>export</code> unless needed Keeps scope clean Use <code>\"$VAR\"</code> when referencing Prevents word splitting Add comments to <code>.bashrc</code> Easier maintenance"},{"location":"lessons/08-advance/environment_variables/#viewing-and-managing-env-vars","title":"\ud83d\udd0d Viewing and Managing Env Vars","text":"Command What It Does <code>printenv</code> List environment variables <code>echo $HOME</code> Print value of a variable <code>set</code> Show all variables (incl. shell) <code>env</code> Run command with temporary env <code>unset VAR_NAME</code> Remove a variable"},{"location":"lessons/08-advance/environment_variables/#real-world-use-case-temporary-overrides","title":"\ud83e\uddea Real-World Use Case: Temporary Overrides","text":"<pre><code>API_KEY=\"123abc\" node app.js\n</code></pre> <p>\u2705 This sets <code>API_KEY</code> only for that command \u2014 great for CI/CD pipelines or quick testing.</p>"},{"location":"lessons/08-advance/environment_variables/#summary","title":"\ud83e\udde0 Summary","text":"Concept Syntax Example Define shell var <code>FOO=bar</code> Export to env <code>export FOO=bar</code> Make permanent Add <code>export</code> to <code>~/.bashrc</code> Remove <code>unset FOO</code> View <code>echo $FOO</code>, <code>printenv</code>"},{"location":"lessons/08-advance/exit_status_and_error_handling/","title":"Exit Status and Error Handling in Bash","text":""},{"location":"lessons/08-advance/exit_status_and_error_handling/#what-is-an-exit-status","title":"\u2705 What Is an Exit Status?","text":"<p>When a command or script runs in Bash, it returns an exit status \u2014 a number between <code>0</code> and <code>255</code> \u2014 that tells whether it succeeded or failed.</p> Exit Code Meaning <code>0</code> Success <code>1\u2013255</code> Failure (varies by command) <p>You can access the exit code of the last run command using:</p> <pre><code>$?\n</code></pre>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#example-checking-exit-status","title":"\ud83d\udccc Example: Checking Exit Status","text":"<pre><code>mkdir new_folder\n\nif [ $? -eq 0 ]; then\n  echo \"Directory created successfully.\"\nelse\n  echo \"Failed to create directory.\"\nfi\n</code></pre>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#simplified-use-and","title":"\ud83d\udd01 Simplified: Use <code>&amp;&amp;</code> and <code>||</code>","text":"<p>Bash offers shorter ways to check success/failure:</p> <pre><code>mkdir new_folder &amp;&amp; echo \"Success\" || echo \"Failed\"\n</code></pre> <ul> <li><code>&amp;&amp;</code> runs if the command succeeds</li> <li><code>||</code> runs if it fails</li> </ul> <p>\u26a0\ufe0f This isn't foolproof if both succeed \u2014 for critical logic, use <code>if</code>.</p>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#using-exit","title":"\ud83e\uddef Using <code>exit</code>","text":"<p>You can manually exit a script or function with a status:</p> <pre><code>if [ ! -f config.txt ]; then\n  echo \"Missing config file.\"\n  exit 1\nfi\n</code></pre> <p>\u2705 <code>exit 0</code> = success \u274c <code>exit 1</code> (or higher) = failure</p>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#defensive-scripting-with-set-options","title":"\ud83d\udee1 Defensive Scripting with <code>set</code> Options","text":""},{"location":"lessons/08-advance/exit_status_and_error_handling/#set-e-exit-on-error","title":"\ud83d\udd10 <code>set -e</code>: Exit on Error","text":"<p>This makes the script exit immediately if any command fails.</p> <pre><code>#!/bin/bash\nset -e\n\nmkdir project\ncd project\ngit clone https://github.com/some/repo.git\n</code></pre> <p>\u26a0\ufe0f Use with caution: you must understand where failure is allowed and where it's not.</p>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#set-u-exit-on-unset-variables","title":"\ud83d\udd10 <code>set -u</code>: Exit on Unset Variables","text":"<p>Prevents silent bugs from uninitialized variables.</p> <pre><code>#!/bin/bash\nset -u\n\necho \"Welcome $USERNAME\"  # Will fail if USERNAME is unset\n</code></pre>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#set-o-pipefail-catch-pipe-errors","title":"\ud83d\udd10 <code>set -o pipefail</code>: Catch pipe errors","text":"<p>Ensures entire pipelines fail properly (useful for logging, filtering):</p> <pre><code>set -o pipefail\n\ngrep \"error\" logfile.txt | tee errors.txt\n</code></pre>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#trap-clean-up-or-handle-failures","title":"\ud83d\udea8 <code>trap</code>: Clean Up or Handle Failures","text":"<p><code>trap</code> lets you run commands when the script exits, or when specific signals (like <code>Ctrl+C</code>) are received.</p>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#example-cleanup-on-exit","title":"\ud83e\uddf9 Example: Cleanup on Exit","text":"<pre><code>#!/bin/bash\nset -e\ntrap cleanup EXIT\n\ncleanup() {\n  echo \"Cleaning up temporary files...\"\n  rm -f /tmp/tempfile\n}\n\ntouch /tmp/tempfile\necho \"Doing important work...\"\n# Script exits, trap calls `cleanup`\n</code></pre>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#catch-ctrlc-sigint","title":"\u274c Catch <code>Ctrl+C</code> (SIGINT):","text":"<pre><code>trap \"echo 'Script interrupted'; exit 1\" SIGINT\n</code></pre>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#practical-example-safer-script-with-all-tools","title":"\ud83e\uddea Practical Example: Safer Script with All Tools","text":"<pre><code>#!/bin/bash\nset -euo pipefail\ntrap \"echo 'Something went wrong! Exiting...'\" ERR\n\ndownload_file() {\n  curl -fSL \"$1\" -o \"$2\"\n  echo \"Downloaded $2\"\n}\n\ndownload_file \"https://example.com/file.txt\" \"output.txt\"\n</code></pre> <ul> <li><code>-e</code> exits if any command fails</li> <li><code>-u</code> exits if a variable is missing</li> <li><code>-o pipefail</code> fails the script if a piped command fails</li> <li><code>trap ... ERR</code> adds a custom error message</li> </ul>"},{"location":"lessons/08-advance/exit_status_and_error_handling/#best-practices-for-error-handling","title":"\ud83e\uddfc Best Practices for Error Handling","text":"Tip Why It Helps Always check <code>$?</code> or use <code>set -e</code> Detects command failures early Use <code>trap</code> for cleanup or logging Prevents leftover files, logs errors Use <code>exit N</code> for clarity Communicates result to calling scripts Quote your variables Avoids subtle bugs in conditionals Use <code>set -u</code> during testing Finds typos and missing vars early"},{"location":"lessons/08-advance/exit_status_and_error_handling/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Feature Description <code>$?</code> Last command\u2019s exit code <code>exit</code> Terminate script with a status code <code>set -e</code> Exit on any error <code>set -u</code> Exit on unset variable <code>set -o pipefail</code> Fail if any part of a pipeline fails <code>trap</code> Run cleanup or error handler"},{"location":"lessons/08-advance/project/","title":"Final Bash Project \u2013 Plan, Build, Level Up \ud83d\ude80","text":""},{"location":"lessons/08-advance/project/#3-bash-project-ideas-for-beginners","title":"\u2705 3 Bash Project Ideas for Beginners","text":""},{"location":"lessons/08-advance/project/#1-folder-backup-tool","title":"\ud83d\udcc1 1. Folder Backup Tool","text":"<p>A script that creates timestamped backups of important folders or files.</p> <p>Key Features:</p> <ul> <li>Takes source and destination as arguments</li> <li>Creates archive (<code>.tar.gz</code>) with date in name</li> <li>Logs the backup and handles errors</li> <li>Optional flags like <code>--dry-run</code> or <code>--verbose</code></li> </ul>"},{"location":"lessons/08-advance/project/#2-terminal-to-do-list-manager","title":"\u2705 2. Terminal To-Do List Manager","text":"<p>A simple interactive CLI tool to manage tasks stored in a <code>.txt</code> file.</p> <p>Key Features:</p> <ul> <li>Add, remove, list, and complete tasks</li> <li>Stores tasks in a file using a consistent format</li> <li>Offers a menu UI (<code>case</code> statement + loop)</li> <li>Uses <code>read</code>, <code>grep</code>, <code>sed</code>, <code>awk</code>, etc.</li> </ul>"},{"location":"lessons/08-advance/project/#3-system-health-checker","title":"\u2705 3. System Health Checker","text":"<p>A diagnostics tool that checks disk usage, memory, uptime, CPU load, and logs everything.</p> <p>Key Features:</p> <ul> <li>Gathers info from commands like <code>df</code>, <code>free</code>, <code>uptime</code>, <code>top</code></li> <li>Generates a simple report (<code>health-YYYY-MM-DD.txt</code>)</li> <li>Optional alerts (e.g., if disk &gt; 80%)</li> <li>Good use of conditionals, functions, formatting</li> </ul> <p>Let\u2019s build Project 1: Folder Backup Tool from scratch.</p>"},{"location":"lessons/08-advance/project/#project-folder-backup-tool-backupsh","title":"\ud83d\udee0 Project: Folder Backup Tool (<code>backup.sh</code>)","text":""},{"location":"lessons/08-advance/project/#1-project-goals","title":"\ud83d\udce6 1. Project Goals","text":"<p>Build a script that:</p> <ul> <li>Backs up a directory to a target location</li> <li>Names backup with a timestamp</li> <li>Creates <code>.tar.gz</code> archives</li> <li>Handles errors gracefully</li> <li>Uses functions and logging</li> </ul>"},{"location":"lessons/08-advance/project/#2-project-structure","title":"\ud83e\uddf1 2. Project Structure","text":"<pre><code>backup.sh\nlogs/\n\u251c\u2500\u2500 backup.log\nbackups/\n</code></pre>"},{"location":"lessons/08-advance/project/#3-features-requirements","title":"\ud83e\udde9 3. Features &amp; Requirements","text":"Feature Tools/Concepts Needed Timestamped backups <code>date</code>, variables Compression <code>tar</code>, <code>gzip</code> Command-line args <code>$1</code>, <code>$2</code>, <code>${1:-default}</code> Logging Functions, <code>&gt;&gt;</code> redirection Error handling <code>set -e</code>, <code>trap</code>, <code>exit</code> Usage message <code>--help</code>, <code>echo</code>"},{"location":"lessons/08-advance/project/#4-step-by-step-implementation","title":"\ud83d\udd28 4. Step-by-Step Implementation","text":""},{"location":"lessons/08-advance/project/#step-1-initialize-the-script","title":"Step 1: Initialize the Script","text":"<pre><code>#!/bin/bash\nset -euo pipefail\ntrap 'echo \"\u274c Error on line $LINENO\"; exit 1' ERR\n</code></pre>"},{"location":"lessons/08-advance/project/#step-2-define-variables","title":"Step 2: Define Variables","text":"<pre><code>SOURCE=${1:-}\nDEST=${2:-\"./backups\"}\nTIMESTAMP=$(date \"+%Y-%m-%d_%H-%M-%S\")\nBACKUP_NAME=\"backup_$TIMESTAMP.tar.gz\"\nLOG_FILE=\"./logs/backup.log\"\n</code></pre>"},{"location":"lessons/08-advance/project/#step-3-print-usage","title":"Step 3: Print Usage","text":"<pre><code>if [[ -z \"$SOURCE\" ]]; then\n  echo \"Usage: $0 &lt;source-folder&gt; [destination-folder]\"\n  exit 1\nfi\n</code></pre>"},{"location":"lessons/08-advance/project/#step-4-logging-function","title":"Step 4: Logging Function","text":"<pre><code>log() {\n  echo \"[$(date '+%F %T')] $1\" | tee -a \"$LOG_FILE\"\n}\n</code></pre>"},{"location":"lessons/08-advance/project/#step-5-create-backup-directory-if-missing","title":"Step 5: Create Backup Directory If Missing","text":"<pre><code>mkdir -p \"$DEST\"\nmkdir -p \"$(dirname \"$LOG_FILE\")\"\n</code></pre>"},{"location":"lessons/08-advance/project/#step-6-run-the-backup","title":"Step 6: Run the Backup","text":"<pre><code>if [[ ! -d \"$SOURCE\" ]]; then\n  log \"\u274c Source directory does not exist: $SOURCE\"\n  exit 1\nfi\n\ntar -czf \"$DEST/$BACKUP_NAME\" \"$SOURCE\"\nlog \"\u2705 Backup created: $DEST/$BACKUP_NAME\"\n</code></pre>"},{"location":"lessons/08-advance/project/#full-script-backupsh","title":"Full Script: <code>backup.sh</code>","text":"<pre><code>#!/bin/bash\nset -euo pipefail\ntrap 'echo \"\u274c Error on line $LINENO\"; exit 1' ERR\n\nSOURCE=${1:-}\nDEST=${2:-\"./backups\"}\nTIMESTAMP=$(date \"+%Y-%m-%d_%H-%M-%S\")\nBACKUP_NAME=\"backup_$TIMESTAMP.tar.gz\"\nLOG_FILE=\"./logs/backup.log\"\n\nlog() {\n  echo \"[$(date '+%F %T')] $1\" | tee -a \"$LOG_FILE\"\n}\n\nif [[ -z \"$SOURCE\" ]]; then\n  echo \"Usage: $0 &lt;source-folder&gt; [destination-folder]\"\n  exit 1\nfi\n\nmkdir -p \"$DEST\"\nmkdir -p \"$(dirname \"$LOG_FILE\")\"\n\nif [[ ! -d \"$SOURCE\" ]]; then\n  log \"\u274c Source directory does not exist: $SOURCE\"\n  exit 1\nfi\n\ntar -czf \"$DEST/$BACKUP_NAME\" \"$SOURCE\"\nlog \"\u2705 Backup created: $DEST/$BACKUP_NAME\"\n</code></pre>"},{"location":"lessons/08-advance/project/#5-run-the-script","title":"\u2705 5. Run the Script","text":"<pre><code>chmod +x backup.sh\n./backup.sh my-folder /tmp/backups\n</code></pre>"},{"location":"lessons/08-advance/project/#6-bonus-features-to-try","title":"\ud83e\uddea 6. Bonus Features to Try","text":"<ul> <li><code>--dry-run</code> mode to simulate without executing</li> <li><code>--help</code> flag with detailed usage</li> <li>Email notification or desktop alert</li> <li>Backup rotation: keep only the latest 5 backups</li> </ul>"},{"location":"lessons/08-advance/project/#what-students-practice-in-this-project","title":"\ud83e\udde0 What Students Practice in This Project","text":"Skill Used In Variables &amp; functions For modular scripting Conditionals &amp; <code>[ ]</code> Input and error checks Loops (in bonus features) For cleanup or automation I/O redirection Logging Debugging (<code>set</code>, <code>trap</code>) Error tracking Command args Customizing script behavior"},{"location":"quizzes/","title":"Quizzes","text":"<p>Welcome to the quizzes section of the Programming 101 course!</p> <p>This directory contains quizzes designed to test your understanding of the concepts covered in each lesson. Use these quizzes to assess your progress and identify areas for further review.</p>"},{"location":"quizzes/#how-to-use","title":"How to Use","text":"<ul> <li>Take the quizzes after completing the corresponding lessons and exercises.</li> <li>Try to answer each question without referring to your notes or the lessons.</li> <li>Review your answers and revisit any topics where you need more practice.</li> </ul>"},{"location":"quizzes/#structure","title":"Structure","text":"<ul> <li>Quizzes are organized to align with the lesson topics.</li> <li>Each quiz may include multiple-choice, short answer, or practical questions.</li> </ul>"},{"location":"quizzes/#tips","title":"Tips","text":"<ul> <li>Treat quizzes as a learning tool, not just an assessment.</li> <li>Use your results to guide your study and focus on areas that need improvement.</li> <li>Don\u2019t rush\u2014take your time to think through each question.</li> </ul> <p>Good luck!</p>"},{"location":"quizzes/quiz_01/","title":"Quiz 01: What is Linux?","text":"<ol> <li>What is Linux and name two popular distributions?</li> <li>What is the mascot of Linux?</li> <li>List one advantage of using Linux over other operating systems.</li> </ol>"},{"location":"quizzes/quiz_02/","title":"Quiz 02: Linux File System","text":"<ol> <li>What is the root directory in Linux?</li> <li>What is the purpose of the <code>/home</code> directory?</li> <li>Which directory contains system-wide configuration files?</li> <li>What command lists all files and directories in the current directory?</li> </ol>"},{"location":"quizzes/quiz_03/","title":"Quiz 03: Terminals and Shells","text":"<ol> <li>What is a terminal emulator?</li> <li>How do you check which shell you are using? Provide the command.</li> <li>Name two popular Linux shells besides Bash.</li> </ol>"},{"location":"quizzes/quiz_04/","title":"Quiz 04: Bash Scripting Basics","text":"<ol> <li>What is a Bash script?</li> <li>Write a Bash script that prints \"Hello, World!\" to the terminal.</li> <li>What command is used to make a script executable?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_05/","title":"Quiz 05: Your First Script","text":"<ol> <li>Write a Bash script that prints your name and the current date.</li> <li>How do you run a Bash script from the terminal?</li> <li>What does the <code>pwd</code> command do?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_06/","title":"Quiz 06: Comments and Output","text":"<ol> <li>What symbol is used for comments in Bash?</li> <li>Write a script that prints three different lines to the terminal.</li> <li>Why are comments important in scripts?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_07/","title":"Quiz 07: Permissions and Shebang","text":"<ol> <li>What does the shebang (<code>#!</code>) do in a script?</li> <li>How do you change the permissions of a script to make it executable?</li> <li>Why is it important to set the correct permissions on scripts?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_08/","title":"Quiz 08: Variables","text":"<ol> <li>How do you define a variable in Bash?</li> <li>Write a script that defines a variable called <code>NAME</code> and prints its value.</li> <li>What is the difference between a variable and a command-line argument?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_09/","title":"Quiz 09: User Input","text":"<ol> <li>What command is used to read user input in Bash?</li> <li>Write a script that prompts the user for their age and prints a message.</li> <li>How can you check if the user entered nothing?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_10/","title":"Quiz 10: Operations","text":"<ol> <li>How do you perform arithmetic operations in Bash?</li> <li>Write a script that adds two numbers and prints the result.</li> <li>Modify your script to multiply two numbers.</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_11/","title":"Quiz 11: Character Manipulation","text":"<ol> <li>How do you convert a string to uppercase in Bash?</li> <li>Write a script that prints the length of a string.</li> <li>How can you extract a substring from a variable?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_12/","title":"Quiz 12: What Are Conditionals?","text":"<ol> <li>What is a conditional statement?</li> <li>Write a Bash script that checks if a number is positive or negative.</li> <li>What is the syntax for an <code>if</code> statement in Bash?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_13/","title":"Quiz 13: Basic Comparisons","text":"<ol> <li>What operators are used for numeric comparison in Bash?</li> <li>Write a script that compares two numbers and prints which one is greater.</li> <li>How do you check if two strings are equal in Bash?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_14/","title":"Quiz 14: Case Statements","text":"<ol> <li>When would you use a <code>case</code> statement instead of multiple <code>if</code> statements?</li> <li>Write a script that asks the user for a day of the week and prints a message using a <code>case</code> statement.</li> <li>Add an option for invalid input that prints an error message.</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_15/","title":"Quiz 15: Nested Conditionals","text":"<ol> <li>What are the potential drawbacks of deeply nested conditionals?</li> <li>Write a script that checks if a number is positive, negative, or zero using nested <code>if</code> statements.</li> <li>Modify your script to print a special message if the number is exactly 100.</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_16/","title":"Quiz 16: For Loops","text":"<ol> <li>How do you write a <code>for</code> loop in Bash?</li> <li>Write a script that prints the numbers 1 to 10 using a <code>for</code> loop.</li> <li>How can you loop over all files in a directory using a <code>for</code> loop?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_17/","title":"Quiz 17: While Loops","text":"<ol> <li>What is the difference between a <code>while</code> loop and a <code>for</code> loop in Bash?</li> <li>Write a script that prints numbers from 1 to 5 using a <code>while</code> loop.</li> <li>Modify your script to keep asking the user for input until they type \"exit\".</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_18/","title":"Quiz 18: Until Loops","text":"<ol> <li>What is an <code>until</code> loop in Bash?</li> <li>Write a script that prints numbers from 1 to 5 using an <code>until</code> loop.</li> <li>When would you use an <code>until</code> loop instead of a <code>while</code> loop?</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_19/","title":"Quiz 19: Breaking and Continuing","text":"<ol> <li>What is the purpose of <code>break</code> in a loop?</li> <li>What is the purpose of <code>continue</code> in a loop?</li> <li>Write a script that loops from 1 to 10 and skips 5 using <code>continue</code>.</li> <li>Modify your script to stop the loop when it reaches 8 using <code>break</code>.</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_20/","title":"Quiz 20: Globbing in Bash","text":"<ol> <li>What does the <code>*</code> (asterisk) symbol mean in Bash globbing?</li> <li>Write a command to list all <code>.txt</code> files in your home directory.</li> <li>Write a script that prints the names of all <code>.sh</code> files in the current directory.</li> </ol> <pre><code># Your answer here\n</code></pre>"},{"location":"quizzes/quiz_21/","title":"Quiz 21: Reading Files in Bash","text":"<ol> <li>Write a Bash script that reads a file line by line and prints each line with its line number.</li> <li>Modify your script to count the number of lines in the file.</li> <li>What command is commonly used to read files in Bash scripts?</li> </ol> <pre><code># Your answer here\n</code></pre> <p>Hint: Use a <code>while</code> loop and the <code>read</code> command.</p>"},{"location":"quizzes/quiz_22/","title":"Quiz 22: IO Redirection","text":"<ol> <li>Write a Bash command to save the output of <code>ls</code> to a file called <code>listing.txt</code>.</li> <li>How do you append output to a file instead of overwriting it?</li> <li>Write a script that reads from a file and prints each line to the terminal.</li> </ol> <pre><code># Your answer here\n</code></pre> <p>Tip: Use <code>&gt;</code> for overwrite and <code>&gt;&gt;</code> for append.</p>"},{"location":"quizzes/quiz_23/","title":"Quiz 23: Script Automation and File Management","text":"<ol> <li>Write a Bash script that creates a backup of a directory by copying it to a new location with a timestamp.</li> <li>Modify your script to delete files older than 7 days in a specified directory.</li> <li>Why is automation important in file management?</li> </ol> <pre><code># Your answer here\n</code></pre> <p>Hint: Use the <code>cp</code> and <code>find</code> commands.</p>"},{"location":"quizzes/quiz_24/","title":"Quiz 24: Defining and Calling Functions","text":"<ol> <li>Write a Bash function that prints \"Hello from a function!\" and call it from your script.</li> <li>Modify your function to accept a name as an argument and print a personalized greeting.</li> <li>What is the syntax for defining a function in Bash?</li> </ol> <pre><code># Your answer here\n</code></pre> <p>Tip: Functions help organize and reuse code.</p>"},{"location":"quizzes/quiz_25/","title":"Quiz 25: Local vs Global Variables","text":"<ol> <li>Write a Bash script that demonstrates the difference between a local and a global variable inside a function.</li> <li>Why is it important to use local variables in functions?</li> <li>What command is used to declare a local variable in Bash?</li> </ol> <pre><code># Your answer here\n</code></pre> <p>Hint: Use the <code>local</code> keyword inside functions.</p>"},{"location":"quizzes/quiz_26/","title":"Quiz 26: Modular Functions","text":"<ol> <li>Write two Bash functions: one that adds two numbers and another that multiplies two numbers. Call both from your script.</li> <li>How can modular functions make your scripts easier to maintain?</li> <li>What is the benefit of reusing functions in multiple scripts?</li> </ol> <pre><code># Your answer here\n</code></pre> <p>Tip: Modular code is easier to debug and extend.</p>"},{"location":"quizzes/quiz_27/","title":"Quiz 27: Passing Arguments and Returning Values","text":"<ol> <li>Write a Bash function that takes two arguments and prints their sum.</li> <li>Modify your function to return the sum as the function's exit status.</li> <li>How do you access arguments passed to a function in Bash?</li> </ol> <pre><code># Your answer here\n</code></pre> <p>Hint: Use <code>$1</code>, <code>$2</code>, etc. for arguments.</p>"}]}